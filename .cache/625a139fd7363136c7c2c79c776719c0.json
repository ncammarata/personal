{"id":"Y5cA","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/jszip/package.json","includedInParent":true,"mtime":1510180218000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1534115700413},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"pako","loc":{"line":4,"column":19},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/flate.js","resolved":"/Users/nick/projects/tomespark/node_modules/pako/index.js"},{"name":"./utils","loc":{"line":5,"column":20},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/flate.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utils.js"},{"name":"./stream/GenericWorker","loc":{"line":6,"column":28},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/flate.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/GenericWorker.js"}],"generated":{"js":"'use strict';\nvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\nvar pako = require(\"pako\");\nvar utils = require(\"./utils\");\nvar GenericWorker = require(\"./stream/GenericWorker\");\n\nvar ARRAY_TYPE = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\nexports.magic = \"\\x08\\x00\";\n\n/**\n * Create a worker that uses pako to inflate/deflate.\n * @constructor\n * @param {String} action the name of the pako function to call : either \"Deflate\" or \"Inflate\".\n * @param {Object} options the options to use when (de)compressing.\n */\nfunction FlateWorker(action, options) {\n    GenericWorker.call(this, \"FlateWorker/\" + action);\n\n    this._pako = null;\n    this._pakoAction = action;\n    this._pakoOptions = options;\n    // the `meta` object from the last chunk received\n    // this allow this worker to pass around metadata\n    this.meta = {};\n}\n\nutils.inherits(FlateWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nFlateWorker.prototype.processChunk = function (chunk) {\n    this.meta = chunk.meta;\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);\n};\n\n/**\n * @see GenericWorker.flush\n */\nFlateWorker.prototype.flush = function () {\n    GenericWorker.prototype.flush.call(this);\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push([], true);\n};\n/**\n * @see GenericWorker.cleanUp\n */\nFlateWorker.prototype.cleanUp = function () {\n    GenericWorker.prototype.cleanUp.call(this);\n    this._pako = null;\n};\n\n/**\n * Create the _pako object.\n * TODO: lazy-loading this object isn't the best solution but it's the\n * quickest. The best solution is to lazy-load the worker list. See also the\n * issue #446.\n */\nFlateWorker.prototype._createPako = function () {\n    this._pako = new pako[this._pakoAction]({\n        raw: true,\n        level: this._pakoOptions.level || -1 // default compression\n    });\n    var self = this;\n    this._pako.onData = function(data) {\n        self.push({\n            data : data,\n            meta : self.meta\n        });\n    };\n};\n\nexports.compressWorker = function (compressionOptions) {\n    return new FlateWorker(\"Deflate\", compressionOptions);\n};\nexports.uncompressWorker = function () {\n    return new FlateWorker(\"Inflate\", {});\n};\n","map":{"mappings":[{"source":"node_modules/jszip/lib/flate.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jszip/lib/flate.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}}],"sources":{"node_modules/jszip/lib/flate.js":"'use strict';\nvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\nvar pako = require(\"pako\");\nvar utils = require(\"./utils\");\nvar GenericWorker = require(\"./stream/GenericWorker\");\n\nvar ARRAY_TYPE = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\nexports.magic = \"\\x08\\x00\";\n\n/**\n * Create a worker that uses pako to inflate/deflate.\n * @constructor\n * @param {String} action the name of the pako function to call : either \"Deflate\" or \"Inflate\".\n * @param {Object} options the options to use when (de)compressing.\n */\nfunction FlateWorker(action, options) {\n    GenericWorker.call(this, \"FlateWorker/\" + action);\n\n    this._pako = null;\n    this._pakoAction = action;\n    this._pakoOptions = options;\n    // the `meta` object from the last chunk received\n    // this allow this worker to pass around metadata\n    this.meta = {};\n}\n\nutils.inherits(FlateWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nFlateWorker.prototype.processChunk = function (chunk) {\n    this.meta = chunk.meta;\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);\n};\n\n/**\n * @see GenericWorker.flush\n */\nFlateWorker.prototype.flush = function () {\n    GenericWorker.prototype.flush.call(this);\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push([], true);\n};\n/**\n * @see GenericWorker.cleanUp\n */\nFlateWorker.prototype.cleanUp = function () {\n    GenericWorker.prototype.cleanUp.call(this);\n    this._pako = null;\n};\n\n/**\n * Create the _pako object.\n * TODO: lazy-loading this object isn't the best solution but it's the\n * quickest. The best solution is to lazy-load the worker list. See also the\n * issue #446.\n */\nFlateWorker.prototype._createPako = function () {\n    this._pako = new pako[this._pakoAction]({\n        raw: true,\n        level: this._pakoOptions.level || -1 // default compression\n    });\n    var self = this;\n    this._pako.onData = function(data) {\n        self.push({\n            data : data,\n            meta : self.meta\n        });\n    };\n};\n\nexports.compressWorker = function (compressionOptions) {\n    return new FlateWorker(\"Deflate\", compressionOptions);\n};\nexports.uncompressWorker = function () {\n    return new FlateWorker(\"Inflate\", {});\n};\n"},"lineCount":86}},"hash":"771f0b2fd52041e2fe066db25f14d1b5","cacheData":{"env":{}}}