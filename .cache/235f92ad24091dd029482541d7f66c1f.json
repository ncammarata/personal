{"id":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","dependencies":[{"name":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1539370614000},{"name":"/Users/nick/projects/personal/package.json","includedInParent":true,"mtime":1540176313978},{"name":"/Users/nick/projects/personal/.babelrc","includedInParent":true,"mtime":1535748626225},{"name":"@tensorflow/tfjs-core","loc":{"line":13,"column":26},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js"},{"name":"../backend/state","loc":{"line":14,"column":22},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/backend/state.js"},{"name":"../errors","loc":{"line":15,"column":23},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/errors.js"},{"name":"../layers/serialization","loc":{"line":16,"column":30},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js"},{"name":"../utils/generic_utils","loc":{"line":17,"column":28},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js"},{"name":"../utils/serialization_utils","loc":{"line":18,"column":36},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/utils/serialization_utils.js"},{"name":"../utils/types_utils","loc":{"line":19,"column":26},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js"},{"name":"../variables","loc":{"line":20,"column":26},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/variables.js"},{"name":"../version","loc":{"line":21,"column":24},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/version.js"},{"name":"./input_layer","loc":{"line":22,"column":28},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js"},{"name":"./topology","loc":{"line":23,"column":25},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar state_1 = require(\"../backend/state\");\nvar errors_1 = require(\"../errors\");\nvar serialization_1 = require(\"../layers/serialization\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar serialization_utils_1 = require(\"../utils/serialization_utils\");\nvar types_utils = require(\"../utils/types_utils\");\nvar variables_1 = require(\"../variables\");\nvar version_1 = require(\"../version\");\nvar input_layer_1 = require(\"./input_layer\");\nvar topology_1 = require(\"./topology\");\nfunction preprocessWeightsForLoading(layer, weights, originalKerasVersion, originalBackend) {\n    if (!originalKerasVersion.startsWith('2.')) {\n        throw new errors_1.ValueError('Unsupported Keras version in weights being loaded: ' +\n            originalKerasVersion);\n    }\n    return weights;\n}\nfunction loadTensor(dtype, shape, value) {\n    var dataType = generic_utils.stringToDType(dtype);\n    return tfjs_core_1.Tensor.make(shape, { values: shape.length === 0 ? value : tfjs_core_1.util.flatten(value) }, dataType);\n}\nfunction loadWeightsFromJson(weightsJSON, layers, skipMismatch) {\n    if (skipMismatch === void 0) { skipMismatch = false; }\n    var originalKerasVersion = weightsJSON['keras_version'];\n    var originalBackend = weightsJSON['backend'];\n    var layerNames = layers.map(function (layer) { return layer.name; });\n    var index = {};\n    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n        var layer = layers_1[_i];\n        if (layer.name != null) {\n            if (index[layer.name] == null) {\n                index[layer.name] = [];\n            }\n            index[layer.name].push(layer);\n        }\n    }\n    var nameToWeights = weightsJSON['weights'];\n    var weightValueTuples = [];\n    for (var k = 0; k < layerNames.length; ++k) {\n        var name_1 = layerNames[k];\n        var layerWeights = nameToWeights[name_1];\n        if (layerWeights == null) {\n            layerWeights = [];\n        }\n        var weightValues = [];\n        for (var n = 0; n < layerWeights.length; ++n) {\n            var weightEntry = layerWeights[n];\n            weightValues.push(new variables_1.LayerVariable(loadTensor(weightEntry['dtype'], weightEntry['shape'], weightEntry['value'])));\n        }\n        for (var _a = 0, _b = index[name_1]; _a < _b.length; _a++) {\n            var layer = _b[_a];\n            var symbolicWeights = layer.weights;\n            weightValues = preprocessWeightsForLoading(layer, weightValues, originalKerasVersion, originalBackend);\n            if (weightValues.length !== symbolicWeights.length) {\n                if (skipMismatch) {\n                    console.warn(\"Skipping loading of weights of layer \" + layer.name + \" \" +\n                        (\"due to mismatch in number of weights: (\" + weightValues.length + \" \") +\n                        (\"vs \" + symbolicWeights.length + \").\"));\n                }\n                else {\n                    throw new errors_1.ValueError(\"Layer #\" + k + \" (named \\\"\" + layer.name + \"\\\") expects \" +\n                        (symbolicWeights.length + \" weight(s), but the saved weights \") +\n                        (\"have \" + weightValues.length + \" element(s).\"));\n                }\n            }\n            for (var i = 0; i < weightValues.length; ++i) {\n                if (skipMismatch) {\n                    if (!tfjs_core_1.util.arraysEqual(symbolicWeights[i].shape, weightValues[i].shape)) {\n                        console.warn(\"Skipping loading of weights for layer \" + layer.name + \" due \" +\n                            (\"to mismatch in shape (\" + symbolicWeights[i].shape + \" vs \") +\n                            (weightValues[i].shape + \")\"));\n                        continue;\n                    }\n                }\n                weightValueTuples.push([symbolicWeights[i], weightValues[i].read()]);\n            }\n        }\n    }\n    variables_1.batchSetValue(weightValueTuples);\n}\nexports.loadWeightsFromJson = loadWeightsFromJson;\nfunction loadWeightsFromNamedTensorMap(weights, layers, strict) {\n    if (strict === void 0) { strict = true; }\n    var nameToWeight = {};\n    var totalWeightsCount = 0;\n    for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {\n        var layer = layers_2[_i];\n        for (var _a = 0, _b = layer.weights; _a < _b.length; _a++) {\n            var weight = _b[_a];\n            if (nameToWeight[weight.originalName] != null) {\n                throw new errors_1.ValueError(\"Duplicate weight name: \" + weight.originalName);\n            }\n            nameToWeight[weight.originalName] = weight;\n            totalWeightsCount++;\n        }\n    }\n    var weightValueTuples = [];\n    for (var name_2 in weights) {\n        if (nameToWeight[name_2] != null) {\n            weightValueTuples.push([nameToWeight[name_2], weights[name_2]]);\n        }\n        else if (strict) {\n            throw new errors_1.ValueError(\"Provided weight data has no target variable: \" + name_2);\n        }\n        delete nameToWeight[name_2];\n    }\n    if (strict) {\n        var unsetNames = [];\n        for (var name_3 in nameToWeight) {\n            unsetNames.push(name_3);\n        }\n        if (unsetNames.length > 0) {\n            throw new errors_1.ValueError(unsetNames.length + \" of \" + totalWeightsCount + \" weights are not set: \" +\n                (\"\" + unsetNames));\n        }\n    }\n    variables_1.batchSetValue(weightValueTuples);\n}\nexports.loadWeightsFromNamedTensorMap = loadWeightsFromNamedTensorMap;\nvar Container = (function (_super) {\n    __extends(Container, _super);\n    function Container(config) {\n        var _this = _super.call(this, {}) || this;\n        _this.containerNodes = new Set();\n        _this.name = config.name;\n        if (_this.name == null) {\n            var prefix = _this.getClassName().toLowerCase();\n            _this.name = state_1.getUid(prefix);\n        }\n        _this.supportsMasking = false;\n        _this.trainable = true;\n        _this.updatable = true;\n        if (Array.isArray(config.inputs)) {\n            _this.inputs = config.inputs.slice();\n        }\n        else {\n            _this.inputs = [config.inputs];\n        }\n        if (Array.isArray(config.outputs)) {\n            _this.outputs = config.outputs.slice();\n        }\n        else {\n            _this.outputs = [config.outputs];\n        }\n        if (generic_utils.unique(_this.inputs).length !== _this.inputs.length) {\n            throw new errors_1.ValueError('The list of inputs passed to the model is ' +\n                'redundant. All inputs should only appear once. Found: ' +\n                _this.inputs.map(function (x) { return x.name; }));\n        }\n        if (generic_utils.unique(_this.outputs).length !== _this.outputs.length) {\n            console.warn('The list of outputs passed to the model is redundant. ' +\n                'All outputs should only appear once. Found: ' +\n                _this.outputs.map(function (x) { return x.name; }));\n        }\n        _this.inputLayers = [];\n        _this.inputLayersNodeIndices = [];\n        _this.inputLayersTensorIndices = [];\n        _this.outputLayers = [];\n        _this.outputLayersNodeIndices = [];\n        _this.outputLayersTensorIndices = [];\n        _this.layers = [];\n        for (var _i = 0, _a = _this.outputs; _i < _a.length; _i++) {\n            var x = _a[_i];\n            var layer = x.sourceLayer;\n            var nodeIndex = x.nodeIndex;\n            var tensorIndex = x.tensorIndex;\n            _this.outputLayers.push(layer);\n            _this.outputLayersNodeIndices.push(nodeIndex);\n            _this.outputLayersTensorIndices.push(tensorIndex);\n        }\n        for (var _b = 0, _c = _this.inputs; _b < _c.length; _b++) {\n            var x = _c[_b];\n            var layer = x.sourceLayer;\n            var nodeIndex = x.nodeIndex;\n            var tensorIndex = x.tensorIndex;\n            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n            _this.inputLayers.push(layer);\n            _this.inputLayersNodeIndices.push(nodeIndex);\n            _this.inputLayersTensorIndices.push(tensorIndex);\n        }\n        _this.inputNames = [];\n        _this.outputNames = [];\n        _this.feedInputShapes = [];\n        _this.feedInputNames = [];\n        _this.feedOutputNames = [];\n        for (var i = 0; i < _this.inputLayers.length; i++) {\n            var layer = _this.inputLayers[i];\n            if (!(layer instanceof input_layer_1.InputLayer)) {\n                throw new TypeError('Input layers to a Model must be InputLayer objects. ' +\n                    (\"Received inputs: \" + config.inputs + \". \") +\n                    (\"Input \" + i + \" (0-based) originates \") +\n                    (\"from layer type \" + layer.getClassName() + \".\"));\n            }\n            _this.inputNames.push(layer.name);\n            _this.feedInputShapes.push(layer.batchInputShape);\n            _this.feedInputNames.push(layer.name);\n        }\n        for (var _d = 0, _e = _this.outputLayers; _d < _e.length; _d++) {\n            var layer = _e[_d];\n            _this.outputNames.push(layer.name);\n        }\n        _this.internalInputShapes = _this.inputs.map(function (x) { return x.shape; });\n        _this.internalOutputShapes = _this.outputs.map(function (x) { return x.shape; });\n        var nodesDepths = {};\n        var nodeIDToNode = {};\n        var layersDepths = {};\n        var layerIDToLayer = {};\n        var layerIndices = {};\n        var nodesInDecreasingDepth = [];\n        var buildMapOfGraph = function (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) {\n            if (layer == null || nodeIndex == null || tensorIndex == null) {\n                layer = tensor.sourceLayer;\n                nodeIndex = tensor.nodeIndex;\n                tensorIndex = tensor.tensorIndex;\n            }\n            var node = layer.inboundNodes[nodeIndex];\n            if (nodesInProgress.indexOf(node) !== -1) {\n                throw new errors_1.RuntimeError(\"The tensor \" + tensor.name + \" at layer \\\"\" + layer.name + \"\\\" \" +\n                    'is part of a cycle.');\n            }\n            if (finishedNodes.indexOf(node) !== -1) {\n                return;\n            }\n            _this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n            if (!(layer.id in layerIndices)) {\n                layerIndices[layer.id] = Object.keys(layerIndices).length;\n            }\n            if (nodesInProgress.indexOf(node) === -1) {\n                nodesInProgress.push(node);\n            }\n            var numInboundLayers = node.inboundLayers.length;\n            for (var i = 0; i < numInboundLayers; i++) {\n                var x = node.inputTensors[i];\n                var layer_1 = node.inboundLayers[i];\n                var nodeIndex_1 = node.nodeIndices[i];\n                var tensorIndex_1 = node.tensorIndices[i];\n                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer_1, nodeIndex_1, tensorIndex_1);\n            }\n            finishedNodes.push(node);\n            while (nodesInProgress.indexOf(node) >= 0) {\n                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n            }\n            nodesInDecreasingDepth.push(node);\n        };\n        var finishedNodes = [];\n        var nodesInProgress = [];\n        for (var _f = 0, _g = _this.outputs; _f < _g.length; _f++) {\n            var x = _g[_f];\n            buildMapOfGraph(x, finishedNodes, nodesInProgress);\n        }\n        var reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n        for (var _h = 0, reversedNodesInDecreasingDepth_1 = reversedNodesInDecreasingDepth; _h < reversedNodesInDecreasingDepth_1.length; _h++) {\n            var node = reversedNodesInDecreasingDepth_1[_h];\n            nodeIDToNode[node.id] = node;\n            if (!(node.id in nodesDepths)) {\n                nodesDepths[node.id] = 0;\n            }\n            var depth = nodesDepths[node.id];\n            var previousDepth = (layersDepths[node.outboundLayer.id] == null ?\n                0 :\n                layersDepths[node.outboundLayer.id]);\n            depth = Math.max(depth, previousDepth);\n            layersDepths[node.outboundLayer.id] = depth;\n            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n            nodesDepths[node.id] = depth;\n            for (var i = 0; i < node.inboundLayers.length; i++) {\n                var inboundLayer = node.inboundLayers[i];\n                var nodeIndex = node.nodeIndices[i];\n                var inboundNode = inboundLayer.inboundNodes[nodeIndex];\n                var previousDepth_1 = (nodesDepths[inboundNode.id] == null ? 0 :\n                    nodesDepths[inboundNode.id]);\n                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth_1);\n                nodeIDToNode[inboundNode.id] = inboundNode;\n            }\n        }\n        var nodesByDepth = {};\n        for (var nodeID in nodesDepths) {\n            var depth = nodesDepths[nodeID];\n            if (!(depth in nodesByDepth)) {\n                nodesByDepth[depth] = [];\n            }\n            nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n        }\n        var layersByDepth = {};\n        for (var layerID in layersDepths) {\n            var depth = layersDepths[layerID];\n            if (!(depth in layersByDepth)) {\n                layersByDepth[depth] = [];\n            }\n            layersByDepth[depth].push(layerIDToLayer[layerID]);\n        }\n        var depthKeys = Object.keys(layersByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        _this.layers = [];\n        for (var _j = 0, depthKeys_1 = depthKeys; _j < depthKeys_1.length; _j++) {\n            var depth = depthKeys_1[_j];\n            var layersForDepth = layersByDepth[depth];\n            layersForDepth.sort(function (a, b) {\n                var aIndex = layerIndices[a.id];\n                var bIndex = layerIndices[b.id];\n                if (aIndex < bIndex) {\n                    return -1;\n                }\n                if (aIndex > bIndex) {\n                    return 1;\n                }\n                return 0;\n            });\n            for (var _k = 0, layersForDepth_1 = layersForDepth; _k < layersForDepth_1.length; _k++) {\n                var layer = layersForDepth_1[_k];\n                _this.layers.push(layer);\n            }\n        }\n        _this.layersByDepth = layersByDepth;\n        depthKeys = Object.keys(nodesByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        var computableTensors = _this.inputs.slice();\n        var layersWithCompleteInput = [];\n        for (var _l = 0, depthKeys_2 = depthKeys; _l < depthKeys_2.length; _l++) {\n            var depth = depthKeys_2[_l];\n            for (var _m = 0, _o = nodesByDepth[depth]; _m < _o.length; _m++) {\n                var node = _o[_m];\n                var layer = node.outboundLayer;\n                if (layer != null) {\n                    for (var _p = 0, _q = node.inputTensors; _p < _q.length; _p++) {\n                        var x = _q[_p];\n                        if (computableTensors.indexOf(x) === -1) {\n                            throw new errors_1.RuntimeError(\"Graph disconnected: cannot obtain value for tensor \" + x +\n                                (\" at layer \\\"\" + layer.name + \"\\\". \") +\n                                'The following previous layers were accessed without ' +\n                                (\"issue: \" + layersWithCompleteInput));\n                        }\n                    }\n                    for (var _r = 0, _s = node.outputTensors; _r < _s.length; _r++) {\n                        var x = _s[_r];\n                        computableTensors.push(x);\n                    }\n                    layersWithCompleteInput.push(layer.name);\n                }\n            }\n        }\n        _this.nodesByDepth = nodesByDepth;\n        var allNames = _this.layers.map(function (x) { return x.name; });\n        var _loop_1 = function (name_4) {\n            var numOccurrences = allNames.filter(function (x) { return x === name_4; }).length;\n            if (numOccurrences !== 1) {\n                throw new errors_1.RuntimeError(\"The name \\\"\" + name_4 + \"\\\" is used \" + numOccurrences + \" times \" +\n                    'in the model. All layer names should be unique. Layer names: ' +\n                    JSON.stringify(allNames));\n            }\n        };\n        for (var _t = 0, allNames_1 = allNames; _t < allNames_1.length; _t++) {\n            var name_4 = allNames_1[_t];\n            _loop_1(name_4);\n        }\n        _this.outboundNodes = [];\n        _this.inboundNodes = [];\n        new topology_1.Node({\n            outboundLayer: _this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: _this.inputs,\n            outputTensors: _this.outputs,\n            inputMasks: _this.inputs.map(function (x) { return null; }),\n            outputMasks: _this.outputs.map(function (x) { return null; }),\n            inputShapes: _this.inputs.map(function (x) { return x.shape; }),\n            outputShapes: _this.outputs.map(function (x) { return x.shape; })\n        });\n        _this.built = true;\n        _this._refCount = 1;\n        return _this;\n    }\n    Container.prototype.assertNotDisposed = function () {\n        if (this._refCount === 0) {\n            throw new Error(\"Container '\" + this.name + \"' is already disposed.\");\n        }\n    };\n    Container.prototype.dispose = function () {\n        this.assertNotDisposed();\n        var result = { refCountAfterDispose: null, numDisposedVariables: 0 };\n        if (--this._refCount === 0) {\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                result.numDisposedVariables += layer.dispose().numDisposedVariables;\n            }\n        }\n        result.refCountAfterDispose = this._refCount;\n        return result;\n    };\n    Object.defineProperty(Container.prototype, \"trainableWeights\", {\n        get: function () {\n            if (this._trainableWeights.length > 0) {\n                throw new errors_1.ValueError('Container instance unexpectedly contains _trainableWeights.' +\n                    'The trainable weights of a Container are a union of the ' +\n                    'trainable weights of its consituent Layers. Its own ' +\n                    '_trainableWeights must remain an empty Array.');\n            }\n            if (!this.trainable) {\n                return [];\n            }\n            var weights = [];\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                weights = weights.concat(layer.trainableWeights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            var weights = [];\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                weights.push.apply(weights, layer.nonTrainableWeights);\n            }\n            if (!this.trainable) {\n                var trainableWeights = [];\n                for (var _b = 0, _c = this.layers; _b < _c.length; _b++) {\n                    var layer = _c[_b];\n                    trainableWeights.push.apply(trainableWeights, layer.trainableWeights);\n                }\n                return trainableWeights.concat(weights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"weights\", {\n        get: function () {\n            return this.trainableWeights.concat(this.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Container.prototype.loadWeights = function (weightsJSON, skipMismatch, isNamedTensorMap, strict) {\n        if (skipMismatch === void 0) { skipMismatch = false; }\n        if (isNamedTensorMap === void 0) { isNamedTensorMap = false; }\n        if (strict === void 0) { strict = true; }\n        if (isNamedTensorMap) {\n            loadWeightsFromNamedTensorMap(weightsJSON, this.layers, strict);\n        }\n        else {\n            loadWeightsFromJson(weightsJSON, this.layers, skipMismatch);\n        }\n    };\n    Container.prototype.updatedConfig = function () {\n        var theConfig = this.getConfig();\n        var modelConfig = {\n            className: this.getClassName(),\n            config: theConfig,\n            kerasVersion: \"tfjs-layers \" + version_1.version,\n            backend: 'TensorFlow.js'\n        };\n        return modelConfig;\n    };\n    Container.prototype.toJSON = function (unused, returnString) {\n        if (returnString === void 0) { returnString = true; }\n        var modelConfig = serialization_utils_1.convertTsToPythonic(this.updatedConfig());\n        return returnString ? JSON.stringify(modelConfig) : modelConfig;\n    };\n    Container.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = generic_utils.toList(inputs);\n            var masks;\n            if ('mask' in kwargs) {\n                masks = generic_utils.toList(kwargs['mask']);\n            }\n            else {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            return _this.runInternalGraph(inputs, masks)[0];\n        });\n    };\n    Container.prototype.computeMask = function (inputs, mask) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = generic_utils.toList(inputs);\n            var masks;\n            if (mask == null) {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            else {\n                masks = generic_utils.toList(mask);\n            }\n            return _this.runInternalGraph(inputs, masks)[1];\n        });\n    };\n    Container.prototype.computeOutputShape = function (inputShape) {\n        var inputShapes = types_utils.normalizeShapeList(inputShape);\n        if (inputShapes.length !== this.inputLayers.length) {\n            throw new errors_1.ValueError(\"Invalid inputShape argument \" + inputShape + \": \" +\n                (\"model has \" + this.inputLayers.length + \" tensor inputs.\"));\n        }\n        var layersToOutputShapes = {};\n        for (var i = 0; i < inputShapes.length; i++) {\n            var layer = this.inputLayers[i];\n            var inputShape_1 = inputShapes[i];\n            var shapeKey = layer.name + '_0_0';\n            layersToOutputShapes[shapeKey] = inputShape_1;\n        }\n        var depthKeys = Object.keys(this.nodesByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        if (depthKeys.length > 1) {\n            for (var _i = 0, depthKeys_3 = depthKeys; _i < depthKeys_3.length; _i++) {\n                var depth = depthKeys_3[_i];\n                var nodes = this.nodesByDepth[depth];\n                for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\n                    var node = nodes_1[_a];\n                    var layer = node.outboundLayer;\n                    if (this.inputLayers.map(function (x) { return x.id; }).indexOf(layer.id) !== -1) {\n                        continue;\n                    }\n                    var inputShapes_1 = [];\n                    for (var j = 0; j < node.inboundLayers.length; j++) {\n                        var inboundLayer = node.inboundLayers[j];\n                        var nodeIndex_2 = node.nodeIndices[j];\n                        var tensorIndex = node.tensorIndices[j];\n                        var shapeKey = inboundLayer.name + \"_\" + nodeIndex_2 + \"_\" + tensorIndex;\n                        var inputShape_2 = layersToOutputShapes[shapeKey];\n                        inputShapes_1.push(inputShape_2);\n                    }\n                    var outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes_1));\n                    var outputShapes_1 = types_utils.normalizeShapeList(outputShape);\n                    var nodeIndex = layer.inboundNodes.indexOf(node);\n                    for (var j = 0; j < outputShapes_1.length; j++) {\n                        var shapeKey = layer.name + \"_\" + nodeIndex + \"_\" + j;\n                        layersToOutputShapes[shapeKey] = outputShapes_1[j];\n                    }\n                }\n            }\n        }\n        var outputShapes = [];\n        var outputShapeKeys = [];\n        for (var i = 0; i < this.outputLayers.length; i++) {\n            var layer = this.outputLayers[i];\n            var nodeIndex = this.outputLayersNodeIndices[i];\n            var tensorIndex = this.outputLayersTensorIndices[i];\n            var shapeKey = layer.name + \"_\" + nodeIndex + \"_\" + tensorIndex;\n            outputShapeKeys.push(shapeKey);\n        }\n        for (var i = 0; i < outputShapeKeys.length; i++) {\n            var key = outputShapeKeys[i];\n            generic_utils.assert(key in layersToOutputShapes);\n            outputShapes.push(layersToOutputShapes[key]);\n        }\n        return generic_utils.singletonOrArray(outputShapes);\n    };\n    Container.prototype.runInternalGraph = function (inputs, masks) {\n        if (masks == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        var tensorMap = {};\n        for (var i = 0; i < this.inputs.length; ++i) {\n            var x = this.inputs[i];\n            var y = inputs[i];\n            var mask = masks[i];\n            tensorMap[x.id] = [y, mask];\n        }\n        var depthKeys = Object.keys(this.nodesByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        for (var _i = 0, depthKeys_4 = depthKeys; _i < depthKeys_4.length; _i++) {\n            var depth = depthKeys_4[_i];\n            var nodes = this.nodesByDepth[depth];\n            for (var _a = 0, nodes_2 = nodes; _a < nodes_2.length; _a++) {\n                var node = nodes_2[_a];\n                var layer = node.outboundLayer;\n                var referenceInputTensors = node.inputTensors;\n                var referenceOutputTensors = node.outputTensors;\n                var computedData = new Array();\n                for (var _b = 0, referenceInputTensors_1 = referenceInputTensors; _b < referenceInputTensors_1.length; _b++) {\n                    var x = referenceInputTensors_1[_b];\n                    if (x.id in tensorMap) {\n                        computedData.push(tensorMap[x.id]);\n                    }\n                }\n                if (computedData.length === referenceInputTensors.length) {\n                    var kwargs = {};\n                    var computedTensors = void 0;\n                    var computedMasks = void 0;\n                    var outputTensors_1 = void 0;\n                    var outputMasks_1 = void 0;\n                    if (node.callArgs != null) {\n                        kwargs = node.callArgs;\n                    }\n                    if (computedData.length === 1) {\n                        var _c = computedData[0], computedTensor = _c[0], computedMask = _c[1];\n                        if (kwargs.mask == null) {\n                            kwargs['mask'] = computedMask;\n                        }\n                        outputTensors_1 =\n                            generic_utils.toList(layer.call(computedTensor, kwargs));\n                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensor, computedMask));\n                        computedTensors = [computedTensor];\n                        computedMasks = [computedMask];\n                    }\n                    else {\n                        computedTensors = computedData.map(function (x) { return x[0]; });\n                        computedMasks = computedData.map(function (x) { return x[1]; });\n                        if (kwargs.mask == null) {\n                            kwargs['mask'] = computedMasks;\n                        }\n                        outputTensors_1 =\n                            generic_utils.toList(layer.call(computedTensors, kwargs));\n                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));\n                    }\n                    if (layer.activityRegularizer) {\n                        throw new errors_1.NotImplementedError('Model invocation with concrete Tensor value(s) in the ' +\n                            'presence of activity regularizer(s) is not supported yet.');\n                    }\n                    for (var i = 0; i < referenceOutputTensors.length; ++i) {\n                        var x = referenceOutputTensors[i];\n                        var y = outputTensors_1[i];\n                        var mask = outputMasks_1[i];\n                        tensorMap[x.id] = [y, mask];\n                    }\n                }\n            }\n        }\n        var outputTensors = [];\n        var outputMasks = [];\n        var outputShapes = [];\n        for (var _d = 0, _e = this.outputs; _d < _e.length; _d++) {\n            var x = _e[_d];\n            generic_utils.assert(x.id in tensorMap, \"Could not compute output \" + x.name + \" : \" + x.id);\n            var _f = tensorMap[x.id], tensor = _f[0], mask = _f[1];\n            outputShapes.push(tensor.shape);\n            outputTensors.push(tensor);\n            outputMasks.push(mask);\n        }\n        return [outputTensors, outputMasks, outputShapes];\n    };\n    Container.prototype.buildNodeConversionMap = function (layers) {\n        var nodeConversionMap = {};\n        var keptNodes;\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            keptNodes = layer instanceof Container ? 1 : 0;\n            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                var nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                if (nodeKey in this.containerNodes) {\n                    nodeConversionMap[nodeKey] = keptNodes;\n                    keptNodes += 1;\n                }\n            }\n        }\n        return nodeConversionMap;\n    };\n    Container.prototype.getLayer = function (name, index) {\n        if (index != null) {\n            if (this.layers.length <= index) {\n                throw new errors_1.ValueError(\"Was asked to retrieve layer at index \" + index + \", but model only \" +\n                    (\"has \" + this.layers.length + \" layer(s).\"));\n            }\n            else {\n                return this.layers[index];\n            }\n        }\n        else {\n            if (name == null) {\n                throw new errors_1.ValueError('Provide either a layer name or layer index');\n            }\n        }\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.name === name) {\n                return layer;\n            }\n        }\n        throw new errors_1.ValueError(\"No such layer: \" + name);\n    };\n    Container.prototype.calculateLosses = function () {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var losses = [];\n            for (var _i = 0, _a = _this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                for (var nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n                    var nodeKey = Container.nodeKey(layer, nodeIndex);\n                    if (_this.containerNodes.has(nodeKey)) {\n                        losses.push.apply(losses, layer.calculateLosses());\n                    }\n                }\n            }\n            return losses;\n        });\n    };\n    Container.prototype.getConfig = function () {\n        var config = { name: this.name };\n        var nodeConversionMap = this.buildNodeConversionMap(this.layers);\n        var layerConfigs = [];\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            var layerClassName = layer.getClassName();\n            var layerConfig = layer.getConfig();\n            var filteredInboundNodes = [];\n            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                var node = layer.inboundNodes[originalNodeIndex];\n                var nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                var kwargs = {};\n                if (this.containerNodes.has(nodeKey)) {\n                    if (node.callArgs) {\n                        try {\n                            JSON.stringify(node.callArgs);\n                            kwargs = node.callArgs;\n                        }\n                        catch (err) {\n                            console.warn(\"Layer \" + layer.name + \" was passed \" +\n                                \"non-serializable keyword arguments: \" +\n                                (node.callArgs + \". They will not be included \") +\n                                \"in the serialized model (and thus will be \" +\n                                \"missing at deserialization time).\");\n                            kwargs = {};\n                        }\n                    }\n                    if (node.inboundLayers.length > 0) {\n                        var nodeData = [];\n                        for (var i = 0; i < node.inboundLayers.length; i++) {\n                            var inboundLayer = node.inboundLayers[i];\n                            var nodeIndex = node.nodeIndices[i];\n                            var tensorIndex = node.tensorIndices[i];\n                            var nodeKey_1 = Container.nodeKey(inboundLayer, nodeIndex);\n                            var newNodeIndex = nodeConversionMap[nodeKey_1];\n                            if (newNodeIndex === null || newNodeIndex === undefined) {\n                                newNodeIndex = 0;\n                            }\n                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n                        }\n                        filteredInboundNodes.push(nodeData);\n                    }\n                }\n            }\n            layerConfigs.push({\n                name: layer.name,\n                className: layerClassName,\n                config: layerConfig,\n                inboundNodes: filteredInboundNodes\n            });\n        }\n        config['layers'] = layerConfigs;\n        var modelInputs = [];\n        for (var i = 0; i < this.inputLayers.length; i++) {\n            var layer = this.inputLayers[i];\n            var nodeIndex = this.inputLayersNodeIndices[i];\n            var nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            var newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            var tensorIndex = this.inputLayersTensorIndices[i];\n            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['inputLayers'] = modelInputs;\n        var modelOutputs = [];\n        for (var i = 0; i < this.outputLayers.length; i++) {\n            var layer = this.outputLayers[i];\n            var nodeIndex = this.outputLayersNodeIndices[i];\n            var nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            var newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            var tensorIndex = this.outputLayersTensorIndices[i];\n            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['outputLayers'] = modelOutputs;\n        return config;\n    };\n    Container.fromConfig = function (cls, config) {\n        var createdLayers = {};\n        var unprocessedNodes = {};\n        function addUnprocessedNode(layer, nodeData) {\n            if (!(layer.name in unprocessedNodes)) {\n                unprocessedNodes[layer.name] = [nodeData];\n            }\n            else {\n                unprocessedNodes[layer.name].push(nodeData);\n            }\n        }\n        function processNode(layer, nodeData) {\n            var inputTensors = [];\n            var kwargs;\n            for (var _i = 0, nodeData_1 = nodeData; _i < nodeData_1.length; _i++) {\n                var inputData = nodeData_1[_i];\n                var inboundLayerName = inputData[0];\n                var inboundNodeIndex = inputData[1];\n                var inboundTensorIndex = inputData[2];\n                if (inputData.length === 3) {\n                    kwargs = {};\n                }\n                else if (inputData.length === 4) {\n                    kwargs = inputData[3];\n                }\n                else {\n                    throw new errors_1.ValueError(\"Improperly formatted model config for layer \" + JSON.stringify(layer) + \": \" + JSON.stringify(inputData));\n                }\n                if (!(inboundLayerName in createdLayers)) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                var inboundLayer = createdLayers[inboundLayerName];\n                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                var inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n            }\n            if (inputTensors.length > 0) {\n                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs);\n            }\n        }\n        function processLayer(layerData) {\n            var layerName = layerData.name;\n            var layer = serialization_1.deserialize(layerData, config.customObjects != null ?\n                config.customObjects :\n                {});\n            createdLayers[layerName] = layer;\n            var inboundNodesData = layerData.inboundNodes;\n            for (var _i = 0, inboundNodesData_1 = inboundNodesData; _i < inboundNodesData_1.length; _i++) {\n                var nodeData = inboundNodesData_1[_i];\n                if (!(nodeData instanceof Array)) {\n                    throw new errors_1.ValueError(\"Corrupted configuration, expected array for nodeData: \" + nodeData);\n                }\n                addUnprocessedNode(layer, nodeData);\n            }\n        }\n        var name = config.name;\n        var layersFromConfig = config.layers;\n        for (var _i = 0, layersFromConfig_1 = layersFromConfig; _i < layersFromConfig_1.length; _i++) {\n            var layerData = layersFromConfig_1[_i];\n            processLayer(layerData);\n        }\n        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n            for (var _a = 0, layersFromConfig_2 = layersFromConfig; _a < layersFromConfig_2.length; _a++) {\n                var layerData = layersFromConfig_2[_a];\n                var layer = createdLayers[layerData.name];\n                if (layer.name in unprocessedNodes) {\n                    for (var _b = 0, _c = unprocessedNodes[layer.name]; _b < _c.length; _b++) {\n                        var nodeData = _c[_b];\n                        processNode(layer, nodeData);\n                    }\n                    delete unprocessedNodes[layer.name];\n                }\n            }\n        }\n        var inputTensors = [];\n        var outputTensors = [];\n        var inputLayersFromConfig = config.inputLayers;\n        for (var _d = 0, inputLayersFromConfig_1 = inputLayersFromConfig; _d < inputLayersFromConfig_1.length; _d++) {\n            var layerData = inputLayersFromConfig_1[_d];\n            var layerName = layerData[0];\n            var nodeIndex = layerData[1];\n            var tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            var layer = createdLayers[layerName];\n            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            inputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        var outputLayersFromConfig = config.outputLayers;\n        for (var _e = 0, outputLayersFromConfig_1 = outputLayersFromConfig; _e < outputLayersFromConfig_1.length; _e++) {\n            var layerData = outputLayersFromConfig_1[_e];\n            var layerName = layerData[0];\n            var nodeIndex = layerData[1];\n            var tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            var layer = createdLayers[layerName];\n            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            outputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        return new cls({ inputs: inputTensors, outputs: outputTensors, name: name });\n    };\n    Object.defineProperty(Container.prototype, \"stateful\", {\n        get: function () {\n            if (this._stateful) {\n                throw new errors_1.ValueError('Container instance unexpectedly has _stateful = true. The ' +\n                    'statefulness of a Container is determined by the Layers it ' +\n                    'contains. Its _stateful property must remain the default false.');\n            }\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.stateful) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Container.prototype.resetStates = function () {\n        var _this = this;\n        tfjs_core_1.tidy(function () {\n            _this.layers.forEach(function (layer) {\n                if (layer.stateful) {\n                    layer.resetStates();\n                }\n            });\n        });\n    };\n    return Container;\n}(topology_1.Layer));\nexports.Container = Container;\n//# sourceMappingURL=container.js.map","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/engine/container.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar state_1 = require(\"../backend/state\");\nvar errors_1 = require(\"../errors\");\nvar serialization_1 = require(\"../layers/serialization\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar serialization_utils_1 = require(\"../utils/serialization_utils\");\nvar types_utils = require(\"../utils/types_utils\");\nvar variables_1 = require(\"../variables\");\nvar version_1 = require(\"../version\");\nvar input_layer_1 = require(\"./input_layer\");\nvar topology_1 = require(\"./topology\");\nfunction preprocessWeightsForLoading(layer, weights, originalKerasVersion, originalBackend) {\n    if (!originalKerasVersion.startsWith('2.')) {\n        throw new errors_1.ValueError('Unsupported Keras version in weights being loaded: ' +\n            originalKerasVersion);\n    }\n    return weights;\n}\nfunction loadTensor(dtype, shape, value) {\n    var dataType = generic_utils.stringToDType(dtype);\n    return tfjs_core_1.Tensor.make(shape, { values: shape.length === 0 ? value : tfjs_core_1.util.flatten(value) }, dataType);\n}\nfunction loadWeightsFromJson(weightsJSON, layers, skipMismatch) {\n    if (skipMismatch === void 0) { skipMismatch = false; }\n    var originalKerasVersion = weightsJSON['keras_version'];\n    var originalBackend = weightsJSON['backend'];\n    var layerNames = layers.map(function (layer) { return layer.name; });\n    var index = {};\n    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n        var layer = layers_1[_i];\n        if (layer.name != null) {\n            if (index[layer.name] == null) {\n                index[layer.name] = [];\n            }\n            index[layer.name].push(layer);\n        }\n    }\n    var nameToWeights = weightsJSON['weights'];\n    var weightValueTuples = [];\n    for (var k = 0; k < layerNames.length; ++k) {\n        var name_1 = layerNames[k];\n        var layerWeights = nameToWeights[name_1];\n        if (layerWeights == null) {\n            layerWeights = [];\n        }\n        var weightValues = [];\n        for (var n = 0; n < layerWeights.length; ++n) {\n            var weightEntry = layerWeights[n];\n            weightValues.push(new variables_1.LayerVariable(loadTensor(weightEntry['dtype'], weightEntry['shape'], weightEntry['value'])));\n        }\n        for (var _a = 0, _b = index[name_1]; _a < _b.length; _a++) {\n            var layer = _b[_a];\n            var symbolicWeights = layer.weights;\n            weightValues = preprocessWeightsForLoading(layer, weightValues, originalKerasVersion, originalBackend);\n            if (weightValues.length !== symbolicWeights.length) {\n                if (skipMismatch) {\n                    console.warn(\"Skipping loading of weights of layer \" + layer.name + \" \" +\n                        (\"due to mismatch in number of weights: (\" + weightValues.length + \" \") +\n                        (\"vs \" + symbolicWeights.length + \").\"));\n                }\n                else {\n                    throw new errors_1.ValueError(\"Layer #\" + k + \" (named \\\"\" + layer.name + \"\\\") expects \" +\n                        (symbolicWeights.length + \" weight(s), but the saved weights \") +\n                        (\"have \" + weightValues.length + \" element(s).\"));\n                }\n            }\n            for (var i = 0; i < weightValues.length; ++i) {\n                if (skipMismatch) {\n                    if (!tfjs_core_1.util.arraysEqual(symbolicWeights[i].shape, weightValues[i].shape)) {\n                        console.warn(\"Skipping loading of weights for layer \" + layer.name + \" due \" +\n                            (\"to mismatch in shape (\" + symbolicWeights[i].shape + \" vs \") +\n                            (weightValues[i].shape + \")\"));\n                        continue;\n                    }\n                }\n                weightValueTuples.push([symbolicWeights[i], weightValues[i].read()]);\n            }\n        }\n    }\n    variables_1.batchSetValue(weightValueTuples);\n}\nexports.loadWeightsFromJson = loadWeightsFromJson;\nfunction loadWeightsFromNamedTensorMap(weights, layers, strict) {\n    if (strict === void 0) { strict = true; }\n    var nameToWeight = {};\n    var totalWeightsCount = 0;\n    for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {\n        var layer = layers_2[_i];\n        for (var _a = 0, _b = layer.weights; _a < _b.length; _a++) {\n            var weight = _b[_a];\n            if (nameToWeight[weight.originalName] != null) {\n                throw new errors_1.ValueError(\"Duplicate weight name: \" + weight.originalName);\n            }\n            nameToWeight[weight.originalName] = weight;\n            totalWeightsCount++;\n        }\n    }\n    var weightValueTuples = [];\n    for (var name_2 in weights) {\n        if (nameToWeight[name_2] != null) {\n            weightValueTuples.push([nameToWeight[name_2], weights[name_2]]);\n        }\n        else if (strict) {\n            throw new errors_1.ValueError(\"Provided weight data has no target variable: \" + name_2);\n        }\n        delete nameToWeight[name_2];\n    }\n    if (strict) {\n        var unsetNames = [];\n        for (var name_3 in nameToWeight) {\n            unsetNames.push(name_3);\n        }\n        if (unsetNames.length > 0) {\n            throw new errors_1.ValueError(unsetNames.length + \" of \" + totalWeightsCount + \" weights are not set: \" +\n                (\"\" + unsetNames));\n        }\n    }\n    variables_1.batchSetValue(weightValueTuples);\n}\nexports.loadWeightsFromNamedTensorMap = loadWeightsFromNamedTensorMap;\nvar Container = (function (_super) {\n    __extends(Container, _super);\n    function Container(config) {\n        var _this = _super.call(this, {}) || this;\n        _this.containerNodes = new Set();\n        _this.name = config.name;\n        if (_this.name == null) {\n            var prefix = _this.getClassName().toLowerCase();\n            _this.name = state_1.getUid(prefix);\n        }\n        _this.supportsMasking = false;\n        _this.trainable = true;\n        _this.updatable = true;\n        if (Array.isArray(config.inputs)) {\n            _this.inputs = config.inputs.slice();\n        }\n        else {\n            _this.inputs = [config.inputs];\n        }\n        if (Array.isArray(config.outputs)) {\n            _this.outputs = config.outputs.slice();\n        }\n        else {\n            _this.outputs = [config.outputs];\n        }\n        if (generic_utils.unique(_this.inputs).length !== _this.inputs.length) {\n            throw new errors_1.ValueError('The list of inputs passed to the model is ' +\n                'redundant. All inputs should only appear once. Found: ' +\n                _this.inputs.map(function (x) { return x.name; }));\n        }\n        if (generic_utils.unique(_this.outputs).length !== _this.outputs.length) {\n            console.warn('The list of outputs passed to the model is redundant. ' +\n                'All outputs should only appear once. Found: ' +\n                _this.outputs.map(function (x) { return x.name; }));\n        }\n        _this.inputLayers = [];\n        _this.inputLayersNodeIndices = [];\n        _this.inputLayersTensorIndices = [];\n        _this.outputLayers = [];\n        _this.outputLayersNodeIndices = [];\n        _this.outputLayersTensorIndices = [];\n        _this.layers = [];\n        for (var _i = 0, _a = _this.outputs; _i < _a.length; _i++) {\n            var x = _a[_i];\n            var layer = x.sourceLayer;\n            var nodeIndex = x.nodeIndex;\n            var tensorIndex = x.tensorIndex;\n            _this.outputLayers.push(layer);\n            _this.outputLayersNodeIndices.push(nodeIndex);\n            _this.outputLayersTensorIndices.push(tensorIndex);\n        }\n        for (var _b = 0, _c = _this.inputs; _b < _c.length; _b++) {\n            var x = _c[_b];\n            var layer = x.sourceLayer;\n            var nodeIndex = x.nodeIndex;\n            var tensorIndex = x.tensorIndex;\n            generic_utils.assert(nodeIndex === 0, 'input layer has >1 nodes');\n            generic_utils.assert(tensorIndex === 0, 'input layer has >1 tensors');\n            _this.inputLayers.push(layer);\n            _this.inputLayersNodeIndices.push(nodeIndex);\n            _this.inputLayersTensorIndices.push(tensorIndex);\n        }\n        _this.inputNames = [];\n        _this.outputNames = [];\n        _this.feedInputShapes = [];\n        _this.feedInputNames = [];\n        _this.feedOutputNames = [];\n        for (var i = 0; i < _this.inputLayers.length; i++) {\n            var layer = _this.inputLayers[i];\n            if (!(layer instanceof input_layer_1.InputLayer)) {\n                throw new TypeError('Input layers to a Model must be InputLayer objects. ' +\n                    (\"Received inputs: \" + config.inputs + \". \") +\n                    (\"Input \" + i + \" (0-based) originates \") +\n                    (\"from layer type \" + layer.getClassName() + \".\"));\n            }\n            _this.inputNames.push(layer.name);\n            _this.feedInputShapes.push(layer.batchInputShape);\n            _this.feedInputNames.push(layer.name);\n        }\n        for (var _d = 0, _e = _this.outputLayers; _d < _e.length; _d++) {\n            var layer = _e[_d];\n            _this.outputNames.push(layer.name);\n        }\n        _this.internalInputShapes = _this.inputs.map(function (x) { return x.shape; });\n        _this.internalOutputShapes = _this.outputs.map(function (x) { return x.shape; });\n        var nodesDepths = {};\n        var nodeIDToNode = {};\n        var layersDepths = {};\n        var layerIDToLayer = {};\n        var layerIndices = {};\n        var nodesInDecreasingDepth = [];\n        var buildMapOfGraph = function (tensor, finishedNodes, nodesInProgress, layer, nodeIndex, tensorIndex) {\n            if (layer == null || nodeIndex == null || tensorIndex == null) {\n                layer = tensor.sourceLayer;\n                nodeIndex = tensor.nodeIndex;\n                tensorIndex = tensor.tensorIndex;\n            }\n            var node = layer.inboundNodes[nodeIndex];\n            if (nodesInProgress.indexOf(node) !== -1) {\n                throw new errors_1.RuntimeError(\"The tensor \" + tensor.name + \" at layer \\\"\" + layer.name + \"\\\" \" +\n                    'is part of a cycle.');\n            }\n            if (finishedNodes.indexOf(node) !== -1) {\n                return;\n            }\n            _this.containerNodes.add(Container.nodeKey(layer, nodeIndex));\n            if (!(layer.id in layerIndices)) {\n                layerIndices[layer.id] = Object.keys(layerIndices).length;\n            }\n            if (nodesInProgress.indexOf(node) === -1) {\n                nodesInProgress.push(node);\n            }\n            var numInboundLayers = node.inboundLayers.length;\n            for (var i = 0; i < numInboundLayers; i++) {\n                var x = node.inputTensors[i];\n                var layer_1 = node.inboundLayers[i];\n                var nodeIndex_1 = node.nodeIndices[i];\n                var tensorIndex_1 = node.tensorIndices[i];\n                buildMapOfGraph(x, finishedNodes, nodesInProgress, layer_1, nodeIndex_1, tensorIndex_1);\n            }\n            finishedNodes.push(node);\n            while (nodesInProgress.indexOf(node) >= 0) {\n                nodesInProgress.splice(nodesInProgress.indexOf(node), 1);\n            }\n            nodesInDecreasingDepth.push(node);\n        };\n        var finishedNodes = [];\n        var nodesInProgress = [];\n        for (var _f = 0, _g = _this.outputs; _f < _g.length; _f++) {\n            var x = _g[_f];\n            buildMapOfGraph(x, finishedNodes, nodesInProgress);\n        }\n        var reversedNodesInDecreasingDepth = nodesInDecreasingDepth.slice().reverse();\n        for (var _h = 0, reversedNodesInDecreasingDepth_1 = reversedNodesInDecreasingDepth; _h < reversedNodesInDecreasingDepth_1.length; _h++) {\n            var node = reversedNodesInDecreasingDepth_1[_h];\n            nodeIDToNode[node.id] = node;\n            if (!(node.id in nodesDepths)) {\n                nodesDepths[node.id] = 0;\n            }\n            var depth = nodesDepths[node.id];\n            var previousDepth = (layersDepths[node.outboundLayer.id] == null ?\n                0 :\n                layersDepths[node.outboundLayer.id]);\n            depth = Math.max(depth, previousDepth);\n            layersDepths[node.outboundLayer.id] = depth;\n            layerIDToLayer[node.outboundLayer.id] = node.outboundLayer;\n            nodesDepths[node.id] = depth;\n            for (var i = 0; i < node.inboundLayers.length; i++) {\n                var inboundLayer = node.inboundLayers[i];\n                var nodeIndex = node.nodeIndices[i];\n                var inboundNode = inboundLayer.inboundNodes[nodeIndex];\n                var previousDepth_1 = (nodesDepths[inboundNode.id] == null ? 0 :\n                    nodesDepths[inboundNode.id]);\n                nodesDepths[inboundNode.id] = Math.max(depth + 1, previousDepth_1);\n                nodeIDToNode[inboundNode.id] = inboundNode;\n            }\n        }\n        var nodesByDepth = {};\n        for (var nodeID in nodesDepths) {\n            var depth = nodesDepths[nodeID];\n            if (!(depth in nodesByDepth)) {\n                nodesByDepth[depth] = [];\n            }\n            nodesByDepth[depth].push(nodeIDToNode[nodeID]);\n        }\n        var layersByDepth = {};\n        for (var layerID in layersDepths) {\n            var depth = layersDepths[layerID];\n            if (!(depth in layersByDepth)) {\n                layersByDepth[depth] = [];\n            }\n            layersByDepth[depth].push(layerIDToLayer[layerID]);\n        }\n        var depthKeys = Object.keys(layersByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        _this.layers = [];\n        for (var _j = 0, depthKeys_1 = depthKeys; _j < depthKeys_1.length; _j++) {\n            var depth = depthKeys_1[_j];\n            var layersForDepth = layersByDepth[depth];\n            layersForDepth.sort(function (a, b) {\n                var aIndex = layerIndices[a.id];\n                var bIndex = layerIndices[b.id];\n                if (aIndex < bIndex) {\n                    return -1;\n                }\n                if (aIndex > bIndex) {\n                    return 1;\n                }\n                return 0;\n            });\n            for (var _k = 0, layersForDepth_1 = layersForDepth; _k < layersForDepth_1.length; _k++) {\n                var layer = layersForDepth_1[_k];\n                _this.layers.push(layer);\n            }\n        }\n        _this.layersByDepth = layersByDepth;\n        depthKeys = Object.keys(nodesByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        var computableTensors = _this.inputs.slice();\n        var layersWithCompleteInput = [];\n        for (var _l = 0, depthKeys_2 = depthKeys; _l < depthKeys_2.length; _l++) {\n            var depth = depthKeys_2[_l];\n            for (var _m = 0, _o = nodesByDepth[depth]; _m < _o.length; _m++) {\n                var node = _o[_m];\n                var layer = node.outboundLayer;\n                if (layer != null) {\n                    for (var _p = 0, _q = node.inputTensors; _p < _q.length; _p++) {\n                        var x = _q[_p];\n                        if (computableTensors.indexOf(x) === -1) {\n                            throw new errors_1.RuntimeError(\"Graph disconnected: cannot obtain value for tensor \" + x +\n                                (\" at layer \\\"\" + layer.name + \"\\\". \") +\n                                'The following previous layers were accessed without ' +\n                                (\"issue: \" + layersWithCompleteInput));\n                        }\n                    }\n                    for (var _r = 0, _s = node.outputTensors; _r < _s.length; _r++) {\n                        var x = _s[_r];\n                        computableTensors.push(x);\n                    }\n                    layersWithCompleteInput.push(layer.name);\n                }\n            }\n        }\n        _this.nodesByDepth = nodesByDepth;\n        var allNames = _this.layers.map(function (x) { return x.name; });\n        var _loop_1 = function (name_4) {\n            var numOccurrences = allNames.filter(function (x) { return x === name_4; }).length;\n            if (numOccurrences !== 1) {\n                throw new errors_1.RuntimeError(\"The name \\\"\" + name_4 + \"\\\" is used \" + numOccurrences + \" times \" +\n                    'in the model. All layer names should be unique. Layer names: ' +\n                    JSON.stringify(allNames));\n            }\n        };\n        for (var _t = 0, allNames_1 = allNames; _t < allNames_1.length; _t++) {\n            var name_4 = allNames_1[_t];\n            _loop_1(name_4);\n        }\n        _this.outboundNodes = [];\n        _this.inboundNodes = [];\n        new topology_1.Node({\n            outboundLayer: _this,\n            inboundLayers: [],\n            nodeIndices: [],\n            tensorIndices: [],\n            inputTensors: _this.inputs,\n            outputTensors: _this.outputs,\n            inputMasks: _this.inputs.map(function (x) { return null; }),\n            outputMasks: _this.outputs.map(function (x) { return null; }),\n            inputShapes: _this.inputs.map(function (x) { return x.shape; }),\n            outputShapes: _this.outputs.map(function (x) { return x.shape; })\n        });\n        _this.built = true;\n        _this._refCount = 1;\n        return _this;\n    }\n    Container.prototype.assertNotDisposed = function () {\n        if (this._refCount === 0) {\n            throw new Error(\"Container '\" + this.name + \"' is already disposed.\");\n        }\n    };\n    Container.prototype.dispose = function () {\n        this.assertNotDisposed();\n        var result = { refCountAfterDispose: null, numDisposedVariables: 0 };\n        if (--this._refCount === 0) {\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                result.numDisposedVariables += layer.dispose().numDisposedVariables;\n            }\n        }\n        result.refCountAfterDispose = this._refCount;\n        return result;\n    };\n    Object.defineProperty(Container.prototype, \"trainableWeights\", {\n        get: function () {\n            if (this._trainableWeights.length > 0) {\n                throw new errors_1.ValueError('Container instance unexpectedly contains _trainableWeights.' +\n                    'The trainable weights of a Container are a union of the ' +\n                    'trainable weights of its consituent Layers. Its own ' +\n                    '_trainableWeights must remain an empty Array.');\n            }\n            if (!this.trainable) {\n                return [];\n            }\n            var weights = [];\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                weights = weights.concat(layer.trainableWeights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            var weights = [];\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                weights.push.apply(weights, layer.nonTrainableWeights);\n            }\n            if (!this.trainable) {\n                var trainableWeights = [];\n                for (var _b = 0, _c = this.layers; _b < _c.length; _b++) {\n                    var layer = _c[_b];\n                    trainableWeights.push.apply(trainableWeights, layer.trainableWeights);\n                }\n                return trainableWeights.concat(weights);\n            }\n            return weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"weights\", {\n        get: function () {\n            return this.trainableWeights.concat(this.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Container.prototype.loadWeights = function (weightsJSON, skipMismatch, isNamedTensorMap, strict) {\n        if (skipMismatch === void 0) { skipMismatch = false; }\n        if (isNamedTensorMap === void 0) { isNamedTensorMap = false; }\n        if (strict === void 0) { strict = true; }\n        if (isNamedTensorMap) {\n            loadWeightsFromNamedTensorMap(weightsJSON, this.layers, strict);\n        }\n        else {\n            loadWeightsFromJson(weightsJSON, this.layers, skipMismatch);\n        }\n    };\n    Container.prototype.updatedConfig = function () {\n        var theConfig = this.getConfig();\n        var modelConfig = {\n            className: this.getClassName(),\n            config: theConfig,\n            kerasVersion: \"tfjs-layers \" + version_1.version,\n            backend: 'TensorFlow.js'\n        };\n        return modelConfig;\n    };\n    Container.prototype.toJSON = function (unused, returnString) {\n        if (returnString === void 0) { returnString = true; }\n        var modelConfig = serialization_utils_1.convertTsToPythonic(this.updatedConfig());\n        return returnString ? JSON.stringify(modelConfig) : modelConfig;\n    };\n    Container.prototype.call = function (inputs, kwargs) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = generic_utils.toList(inputs);\n            var masks;\n            if ('mask' in kwargs) {\n                masks = generic_utils.toList(kwargs['mask']);\n            }\n            else {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            return _this.runInternalGraph(inputs, masks)[0];\n        });\n    };\n    Container.prototype.computeMask = function (inputs, mask) {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            inputs = generic_utils.toList(inputs);\n            var masks;\n            if (mask == null) {\n                masks = generic_utils.pyListRepeat(null, inputs.length);\n            }\n            else {\n                masks = generic_utils.toList(mask);\n            }\n            return _this.runInternalGraph(inputs, masks)[1];\n        });\n    };\n    Container.prototype.computeOutputShape = function (inputShape) {\n        var inputShapes = types_utils.normalizeShapeList(inputShape);\n        if (inputShapes.length !== this.inputLayers.length) {\n            throw new errors_1.ValueError(\"Invalid inputShape argument \" + inputShape + \": \" +\n                (\"model has \" + this.inputLayers.length + \" tensor inputs.\"));\n        }\n        var layersToOutputShapes = {};\n        for (var i = 0; i < inputShapes.length; i++) {\n            var layer = this.inputLayers[i];\n            var inputShape_1 = inputShapes[i];\n            var shapeKey = layer.name + '_0_0';\n            layersToOutputShapes[shapeKey] = inputShape_1;\n        }\n        var depthKeys = Object.keys(this.nodesByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        if (depthKeys.length > 1) {\n            for (var _i = 0, depthKeys_3 = depthKeys; _i < depthKeys_3.length; _i++) {\n                var depth = depthKeys_3[_i];\n                var nodes = this.nodesByDepth[depth];\n                for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\n                    var node = nodes_1[_a];\n                    var layer = node.outboundLayer;\n                    if (this.inputLayers.map(function (x) { return x.id; }).indexOf(layer.id) !== -1) {\n                        continue;\n                    }\n                    var inputShapes_1 = [];\n                    for (var j = 0; j < node.inboundLayers.length; j++) {\n                        var inboundLayer = node.inboundLayers[j];\n                        var nodeIndex_2 = node.nodeIndices[j];\n                        var tensorIndex = node.tensorIndices[j];\n                        var shapeKey = inboundLayer.name + \"_\" + nodeIndex_2 + \"_\" + tensorIndex;\n                        var inputShape_2 = layersToOutputShapes[shapeKey];\n                        inputShapes_1.push(inputShape_2);\n                    }\n                    var outputShape = layer.computeOutputShape(generic_utils.singletonOrArray(inputShapes_1));\n                    var outputShapes_1 = types_utils.normalizeShapeList(outputShape);\n                    var nodeIndex = layer.inboundNodes.indexOf(node);\n                    for (var j = 0; j < outputShapes_1.length; j++) {\n                        var shapeKey = layer.name + \"_\" + nodeIndex + \"_\" + j;\n                        layersToOutputShapes[shapeKey] = outputShapes_1[j];\n                    }\n                }\n            }\n        }\n        var outputShapes = [];\n        var outputShapeKeys = [];\n        for (var i = 0; i < this.outputLayers.length; i++) {\n            var layer = this.outputLayers[i];\n            var nodeIndex = this.outputLayersNodeIndices[i];\n            var tensorIndex = this.outputLayersTensorIndices[i];\n            var shapeKey = layer.name + \"_\" + nodeIndex + \"_\" + tensorIndex;\n            outputShapeKeys.push(shapeKey);\n        }\n        for (var i = 0; i < outputShapeKeys.length; i++) {\n            var key = outputShapeKeys[i];\n            generic_utils.assert(key in layersToOutputShapes);\n            outputShapes.push(layersToOutputShapes[key]);\n        }\n        return generic_utils.singletonOrArray(outputShapes);\n    };\n    Container.prototype.runInternalGraph = function (inputs, masks) {\n        if (masks == null) {\n            masks = generic_utils.pyListRepeat(null, inputs.length);\n        }\n        var tensorMap = {};\n        for (var i = 0; i < this.inputs.length; ++i) {\n            var x = this.inputs[i];\n            var y = inputs[i];\n            var mask = masks[i];\n            tensorMap[x.id] = [y, mask];\n        }\n        var depthKeys = Object.keys(this.nodesByDepth)\n            .map(function (x) { return parseInt(x, 10); })\n            .sort(generic_utils.reverseNumberCompare);\n        for (var _i = 0, depthKeys_4 = depthKeys; _i < depthKeys_4.length; _i++) {\n            var depth = depthKeys_4[_i];\n            var nodes = this.nodesByDepth[depth];\n            for (var _a = 0, nodes_2 = nodes; _a < nodes_2.length; _a++) {\n                var node = nodes_2[_a];\n                var layer = node.outboundLayer;\n                var referenceInputTensors = node.inputTensors;\n                var referenceOutputTensors = node.outputTensors;\n                var computedData = new Array();\n                for (var _b = 0, referenceInputTensors_1 = referenceInputTensors; _b < referenceInputTensors_1.length; _b++) {\n                    var x = referenceInputTensors_1[_b];\n                    if (x.id in tensorMap) {\n                        computedData.push(tensorMap[x.id]);\n                    }\n                }\n                if (computedData.length === referenceInputTensors.length) {\n                    var kwargs = {};\n                    var computedTensors = void 0;\n                    var computedMasks = void 0;\n                    var outputTensors_1 = void 0;\n                    var outputMasks_1 = void 0;\n                    if (node.callArgs != null) {\n                        kwargs = node.callArgs;\n                    }\n                    if (computedData.length === 1) {\n                        var _c = computedData[0], computedTensor = _c[0], computedMask = _c[1];\n                        if (kwargs.mask == null) {\n                            kwargs['mask'] = computedMask;\n                        }\n                        outputTensors_1 =\n                            generic_utils.toList(layer.call(computedTensor, kwargs));\n                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensor, computedMask));\n                        computedTensors = [computedTensor];\n                        computedMasks = [computedMask];\n                    }\n                    else {\n                        computedTensors = computedData.map(function (x) { return x[0]; });\n                        computedMasks = computedData.map(function (x) { return x[1]; });\n                        if (kwargs.mask == null) {\n                            kwargs['mask'] = computedMasks;\n                        }\n                        outputTensors_1 =\n                            generic_utils.toList(layer.call(computedTensors, kwargs));\n                        outputMasks_1 = generic_utils.toList(layer.computeMask(computedTensors, computedMasks));\n                    }\n                    if (layer.activityRegularizer) {\n                        throw new errors_1.NotImplementedError('Model invocation with concrete Tensor value(s) in the ' +\n                            'presence of activity regularizer(s) is not supported yet.');\n                    }\n                    for (var i = 0; i < referenceOutputTensors.length; ++i) {\n                        var x = referenceOutputTensors[i];\n                        var y = outputTensors_1[i];\n                        var mask = outputMasks_1[i];\n                        tensorMap[x.id] = [y, mask];\n                    }\n                }\n            }\n        }\n        var outputTensors = [];\n        var outputMasks = [];\n        var outputShapes = [];\n        for (var _d = 0, _e = this.outputs; _d < _e.length; _d++) {\n            var x = _e[_d];\n            generic_utils.assert(x.id in tensorMap, \"Could not compute output \" + x.name + \" : \" + x.id);\n            var _f = tensorMap[x.id], tensor = _f[0], mask = _f[1];\n            outputShapes.push(tensor.shape);\n            outputTensors.push(tensor);\n            outputMasks.push(mask);\n        }\n        return [outputTensors, outputMasks, outputShapes];\n    };\n    Container.prototype.buildNodeConversionMap = function (layers) {\n        var nodeConversionMap = {};\n        var keptNodes;\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            keptNodes = layer instanceof Container ? 1 : 0;\n            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                var nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                if (nodeKey in this.containerNodes) {\n                    nodeConversionMap[nodeKey] = keptNodes;\n                    keptNodes += 1;\n                }\n            }\n        }\n        return nodeConversionMap;\n    };\n    Container.prototype.getLayer = function (name, index) {\n        if (index != null) {\n            if (this.layers.length <= index) {\n                throw new errors_1.ValueError(\"Was asked to retrieve layer at index \" + index + \", but model only \" +\n                    (\"has \" + this.layers.length + \" layer(s).\"));\n            }\n            else {\n                return this.layers[index];\n            }\n        }\n        else {\n            if (name == null) {\n                throw new errors_1.ValueError('Provide either a layer name or layer index');\n            }\n        }\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer.name === name) {\n                return layer;\n            }\n        }\n        throw new errors_1.ValueError(\"No such layer: \" + name);\n    };\n    Container.prototype.calculateLosses = function () {\n        var _this = this;\n        return tfjs_core_1.tidy(function () {\n            var losses = [];\n            for (var _i = 0, _a = _this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                for (var nodeIndex = 0; nodeIndex < layer.inboundNodes.length; ++nodeIndex) {\n                    var nodeKey = Container.nodeKey(layer, nodeIndex);\n                    if (_this.containerNodes.has(nodeKey)) {\n                        losses.push.apply(losses, layer.calculateLosses());\n                    }\n                }\n            }\n            return losses;\n        });\n    };\n    Container.prototype.getConfig = function () {\n        var config = { name: this.name };\n        var nodeConversionMap = this.buildNodeConversionMap(this.layers);\n        var layerConfigs = [];\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            var layerClassName = layer.getClassName();\n            var layerConfig = layer.getConfig();\n            var filteredInboundNodes = [];\n            for (var originalNodeIndex = 0; originalNodeIndex < layer.inboundNodes.length; originalNodeIndex++) {\n                var node = layer.inboundNodes[originalNodeIndex];\n                var nodeKey = Container.nodeKey(layer, originalNodeIndex);\n                var kwargs = {};\n                if (this.containerNodes.has(nodeKey)) {\n                    if (node.callArgs) {\n                        try {\n                            JSON.stringify(node.callArgs);\n                            kwargs = node.callArgs;\n                        }\n                        catch (err) {\n                            console.warn(\"Layer \" + layer.name + \" was passed \" +\n                                \"non-serializable keyword arguments: \" +\n                                (node.callArgs + \". They will not be included \") +\n                                \"in the serialized model (and thus will be \" +\n                                \"missing at deserialization time).\");\n                            kwargs = {};\n                        }\n                    }\n                    if (node.inboundLayers.length > 0) {\n                        var nodeData = [];\n                        for (var i = 0; i < node.inboundLayers.length; i++) {\n                            var inboundLayer = node.inboundLayers[i];\n                            var nodeIndex = node.nodeIndices[i];\n                            var tensorIndex = node.tensorIndices[i];\n                            var nodeKey_1 = Container.nodeKey(inboundLayer, nodeIndex);\n                            var newNodeIndex = nodeConversionMap[nodeKey_1];\n                            if (newNodeIndex === null || newNodeIndex === undefined) {\n                                newNodeIndex = 0;\n                            }\n                            nodeData.push([inboundLayer.name, newNodeIndex, tensorIndex, kwargs]);\n                        }\n                        filteredInboundNodes.push(nodeData);\n                    }\n                }\n            }\n            layerConfigs.push({\n                name: layer.name,\n                className: layerClassName,\n                config: layerConfig,\n                inboundNodes: filteredInboundNodes\n            });\n        }\n        config['layers'] = layerConfigs;\n        var modelInputs = [];\n        for (var i = 0; i < this.inputLayers.length; i++) {\n            var layer = this.inputLayers[i];\n            var nodeIndex = this.inputLayersNodeIndices[i];\n            var nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            var newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            var tensorIndex = this.inputLayersTensorIndices[i];\n            modelInputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['inputLayers'] = modelInputs;\n        var modelOutputs = [];\n        for (var i = 0; i < this.outputLayers.length; i++) {\n            var layer = this.outputLayers[i];\n            var nodeIndex = this.outputLayersNodeIndices[i];\n            var nodeKey = Container.nodeKey(layer, nodeIndex);\n            if (!this.containerNodes.has(nodeKey)) {\n                continue;\n            }\n            var newNodeIndex = nodeConversionMap[nodeKey];\n            if (newNodeIndex === null || newNodeIndex === undefined) {\n                newNodeIndex = 0;\n            }\n            var tensorIndex = this.outputLayersTensorIndices[i];\n            modelOutputs.push([layer.name, newNodeIndex, tensorIndex]);\n        }\n        config['outputLayers'] = modelOutputs;\n        return config;\n    };\n    Container.fromConfig = function (cls, config) {\n        var createdLayers = {};\n        var unprocessedNodes = {};\n        function addUnprocessedNode(layer, nodeData) {\n            if (!(layer.name in unprocessedNodes)) {\n                unprocessedNodes[layer.name] = [nodeData];\n            }\n            else {\n                unprocessedNodes[layer.name].push(nodeData);\n            }\n        }\n        function processNode(layer, nodeData) {\n            var inputTensors = [];\n            var kwargs;\n            for (var _i = 0, nodeData_1 = nodeData; _i < nodeData_1.length; _i++) {\n                var inputData = nodeData_1[_i];\n                var inboundLayerName = inputData[0];\n                var inboundNodeIndex = inputData[1];\n                var inboundTensorIndex = inputData[2];\n                if (inputData.length === 3) {\n                    kwargs = {};\n                }\n                else if (inputData.length === 4) {\n                    kwargs = inputData[3];\n                }\n                else {\n                    throw new errors_1.ValueError(\"Improperly formatted model config for layer \" + JSON.stringify(layer) + \": \" + JSON.stringify(inputData));\n                }\n                if (!(inboundLayerName in createdLayers)) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                var inboundLayer = createdLayers[inboundLayerName];\n                if (inboundLayer.inboundNodes.length <= inboundNodeIndex) {\n                    addUnprocessedNode(layer, nodeData);\n                    return;\n                }\n                var inboundNode = inboundLayer.inboundNodes[inboundNodeIndex];\n                inputTensors.push(inboundNode.outputTensors[inboundTensorIndex]);\n            }\n            if (inputTensors.length > 0) {\n                layer.apply(generic_utils.singletonOrArray(inputTensors), kwargs);\n            }\n        }\n        function processLayer(layerData) {\n            var layerName = layerData.name;\n            var layer = serialization_1.deserialize(layerData, config.customObjects != null ?\n                config.customObjects :\n                {});\n            createdLayers[layerName] = layer;\n            var inboundNodesData = layerData.inboundNodes;\n            for (var _i = 0, inboundNodesData_1 = inboundNodesData; _i < inboundNodesData_1.length; _i++) {\n                var nodeData = inboundNodesData_1[_i];\n                if (!(nodeData instanceof Array)) {\n                    throw new errors_1.ValueError(\"Corrupted configuration, expected array for nodeData: \" + nodeData);\n                }\n                addUnprocessedNode(layer, nodeData);\n            }\n        }\n        var name = config.name;\n        var layersFromConfig = config.layers;\n        for (var _i = 0, layersFromConfig_1 = layersFromConfig; _i < layersFromConfig_1.length; _i++) {\n            var layerData = layersFromConfig_1[_i];\n            processLayer(layerData);\n        }\n        while (!generic_utils.isObjectEmpty(unprocessedNodes)) {\n            for (var _a = 0, layersFromConfig_2 = layersFromConfig; _a < layersFromConfig_2.length; _a++) {\n                var layerData = layersFromConfig_2[_a];\n                var layer = createdLayers[layerData.name];\n                if (layer.name in unprocessedNodes) {\n                    for (var _b = 0, _c = unprocessedNodes[layer.name]; _b < _c.length; _b++) {\n                        var nodeData = _c[_b];\n                        processNode(layer, nodeData);\n                    }\n                    delete unprocessedNodes[layer.name];\n                }\n            }\n        }\n        var inputTensors = [];\n        var outputTensors = [];\n        var inputLayersFromConfig = config.inputLayers;\n        for (var _d = 0, inputLayersFromConfig_1 = inputLayersFromConfig; _d < inputLayersFromConfig_1.length; _d++) {\n            var layerData = inputLayersFromConfig_1[_d];\n            var layerName = layerData[0];\n            var nodeIndex = layerData[1];\n            var tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            var layer = createdLayers[layerName];\n            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            inputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        var outputLayersFromConfig = config.outputLayers;\n        for (var _e = 0, outputLayersFromConfig_1 = outputLayersFromConfig; _e < outputLayersFromConfig_1.length; _e++) {\n            var layerData = outputLayersFromConfig_1[_e];\n            var layerName = layerData[0];\n            var nodeIndex = layerData[1];\n            var tensorIndex = layerData[2];\n            generic_utils.assert(layerName in createdLayers);\n            var layer = createdLayers[layerName];\n            var layerOutputTensors = layer.inboundNodes[nodeIndex].outputTensors;\n            outputTensors.push(layerOutputTensors[tensorIndex]);\n        }\n        return new cls({ inputs: inputTensors, outputs: outputTensors, name: name });\n    };\n    Object.defineProperty(Container.prototype, \"stateful\", {\n        get: function () {\n            if (this._stateful) {\n                throw new errors_1.ValueError('Container instance unexpectedly has _stateful = true. The ' +\n                    'statefulness of a Container is determined by the Layers it ' +\n                    'contains. Its _stateful property must remain the default false.');\n            }\n            for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n                var layer = _a[_i];\n                if (layer.stateful) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Container.prototype.resetStates = function () {\n        var _this = this;\n        tfjs_core_1.tidy(function () {\n            _this.layers.forEach(function (layer) {\n                if (layer.stateful) {\n                    layer.resetStates();\n                }\n            });\n        });\n    };\n    return Container;\n}(topology_1.Layer));\nexports.Container = Container;\n//# sourceMappingURL=container.js.map"},"lineCount":932}},"hash":"948a7edd815c457c6d16815bfa8847c0","cacheData":{"env":{}}}