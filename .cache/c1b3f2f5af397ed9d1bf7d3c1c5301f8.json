{"id":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","dependencies":[{"name":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/package.json","includedInParent":true,"mtime":1533685354652},{"name":"/Users/nick/projects/personal/package.json","includedInParent":true,"mtime":1545697594915},{"name":"/Users/nick/projects/personal/.babelrc","includedInParent":true,"mtime":1535748626225},{"name":"create-hash","loc":{"line":1,"column":25},"parent":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","resolved":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/create-hash/browser.js"},{"name":"buffer","parent":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","resolved":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar createHash = require('create-hash');\nmodule.exports = function (seed, len) {\n  var t = new Buffer('');\n  var  i = 0, c;\n  while (t.length < len) {\n    c = i2ops(i++);\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);\n  }\n  return t.slice(0, len);\n};\n\nfunction i2ops(c) {\n  var out = new Buffer(4);\n  out.writeUInt32BE(c,0);\n  return out;\n}","map":{"mappings":[{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}}],"sources":{"../../.npm-global/lib/node_modules/parcel/node_modules/public-encrypt/mgf.js":"var createHash = require('create-hash');\nmodule.exports = function (seed, len) {\n  var t = new Buffer('');\n  var  i = 0, c;\n  while (t.length < len) {\n    c = i2ops(i++);\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);\n  }\n  return t.slice(0, len);\n};\n\nfunction i2ops(c) {\n  var out = new Buffer(4);\n  out.writeUInt32BE(c,0);\n  return out;\n}"},"lineCount":17}},"hash":"8632deb235db26b061ab40119ae8b30f","cacheData":{"env":{}}}