{"id":"node_modules/jszip/lib/stream/ConvertWorker.js","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/jszip/package.json","includedInParent":true,"mtime":1510180218000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1534115700413},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"./GenericWorker","loc":{"line":3,"column":28},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/ConvertWorker.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/GenericWorker.js"},{"name":"../utils","loc":{"line":4,"column":20},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/ConvertWorker.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utils.js"}],"generated":{"js":"'use strict';\n\nvar GenericWorker = require('./GenericWorker');\nvar utils = require('../utils');\n\n/**\n * A worker which convert chunks to a specified type.\n * @constructor\n * @param {String} destType the destination type.\n */\nfunction ConvertWorker(destType) {\n    GenericWorker.call(this, \"ConvertWorker to \" + destType);\n    this.destType = destType;\n}\nutils.inherits(ConvertWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nConvertWorker.prototype.processChunk = function (chunk) {\n    this.push({\n        data : utils.transformTo(this.destType, chunk.data),\n        meta : chunk.meta\n    });\n};\nmodule.exports = ConvertWorker;\n","map":{"mappings":[{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jszip/lib/stream/ConvertWorker.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/jszip/lib/stream/ConvertWorker.js":"'use strict';\n\nvar GenericWorker = require('./GenericWorker');\nvar utils = require('../utils');\n\n/**\n * A worker which convert chunks to a specified type.\n * @constructor\n * @param {String} destType the destination type.\n */\nfunction ConvertWorker(destType) {\n    GenericWorker.call(this, \"ConvertWorker to \" + destType);\n    this.destType = destType;\n}\nutils.inherits(ConvertWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nConvertWorker.prototype.processChunk = function (chunk) {\n    this.push({\n        data : utils.transformTo(this.destType, chunk.data),\n        meta : chunk.meta\n    });\n};\nmodule.exports = ConvertWorker;\n"},"lineCount":27}},"hash":"3432daa97dcc4e061c262fb6d690fe76","cacheData":{"env":{}}}