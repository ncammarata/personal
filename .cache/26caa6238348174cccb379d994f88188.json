{"id":"node_modules/protobufjs/src/root.js","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/protobufjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1534960276803},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"./namespace","loc":{"line":5,"column":24},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/root.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/namespace.js"},{"name":"./field","loc":{"line":8,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/root.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/field.js"},{"name":"./enum","loc":{"line":9,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/root.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/enum.js"},{"name":"./oneof","loc":{"line":10,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/root.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/oneof.js"},{"name":"./util","loc":{"line":11,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/root.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/util.js"},{"name":"process","parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/root.js","resolved":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n","map":{"mappings":[{"source":"node_modules/protobufjs/src/root.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/protobufjs/src/root.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}}],"sources":{"node_modules/protobufjs/src/root.js":"\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n"},"lineCount":353}},"hash":"1fdc68974b3679dfc535fa057ce44365","cacheData":{"env":{}}}