{"id":"node_modules/jszip/lib/utf8.js","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/jszip/package.json","includedInParent":true,"mtime":1510180218000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1533838770287},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"./utils","loc":{"line":3,"column":20},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utf8.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utils.js"},{"name":"./support","loc":{"line":4,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utf8.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/support.js"},{"name":"./nodejsUtils","loc":{"line":5,"column":26},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utf8.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/nodejsUtils.js"},{"name":"./stream/GenericWorker","loc":{"line":6,"column":28},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utf8.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/GenericWorker.js"}],"generated":{"js":"'use strict';\n\nvar utils = require('./utils');\nvar support = require('./support');\nvar nodejsUtils = require('./nodejsUtils');\nvar GenericWorker = require('./stream/GenericWorker');\n\n/**\n * The following functions come from pako, from pako/lib/utils/strings\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new Array(256);\nfor (var i=0; i<256; i++) {\n  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n// convert string to array (typed, when possible)\nvar string2buf = function (str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n    // count binary size\n    for (m_pos = 0; m_pos < str_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n\n    // allocate buffer\n    if (support.uint8array) {\n        buf = new Uint8Array(buf_len);\n    } else {\n        buf = new Array(buf_len);\n    }\n\n    // convert\n    for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */\n            buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */\n            buf[i++] = 0xC0 | (c >>> 6);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else if (c < 0x10000) {\n            /* three bytes */\n            buf[i++] = 0xE0 | (c >>> 12);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else {\n            /* four bytes */\n            buf[i++] = 0xf0 | (c >>> 18);\n            buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n    }\n\n    return buf;\n};\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = function(buf, max) {\n    var pos;\n\n    max = max || buf.length;\n    if (max > buf.length) { max = buf.length; }\n\n    // go back from last position, until start of sequence found\n    pos = max-1;\n    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n    // Fuckup - very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) { return max; }\n\n    // If we came to start of buffer - that means vuffer is too small,\n    // return max too.\n    if (pos === 0) { return max; }\n\n    return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n// convert array to string\nvar buf2string = function (buf) {\n    var str, i, out, c, c_len;\n    var len = buf.length;\n\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len*2);\n\n    for (out=0, i=0; i<len;) {\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while (c_len > 1 && i < len) {\n            c = (c << 6) | (buf[i++] & 0x3f);\n            c_len--;\n        }\n\n        // terminated by end of string?\n        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n            utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n        }\n    }\n\n    // shrinkBuf(utf16buf, out)\n    if (utf16buf.length !== out) {\n        if(utf16buf.subarray) {\n            utf16buf = utf16buf.subarray(0, out);\n        } else {\n            utf16buf.length = out;\n        }\n    }\n\n    // return String.fromCharCode.apply(null, utf16buf);\n    return utils.applyFromCharCode(utf16buf);\n};\n\n\n// That's all for the pako functions.\n\n\n/**\n * Transform a javascript string into an array (typed if possible) of bytes,\n * UTF-8 encoded.\n * @param {String} str the string to encode\n * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.\n */\nexports.utf8encode = function utf8encode(str) {\n    if (support.nodebuffer) {\n        return nodejsUtils.newBufferFrom(str, \"utf-8\");\n    }\n\n    return string2buf(str);\n};\n\n\n/**\n * Transform a bytes array (or a representation) representing an UTF-8 encoded\n * string into a javascript string.\n * @param {Array|Uint8Array|Buffer} buf the data de decode\n * @return {String} the decoded string.\n */\nexports.utf8decode = function utf8decode(buf) {\n    if (support.nodebuffer) {\n        return utils.transformTo(\"nodebuffer\", buf).toString(\"utf-8\");\n    }\n\n    buf = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", buf);\n\n    return buf2string(buf);\n};\n\n/**\n * A worker to decode utf8 encoded binary chunks into string chunks.\n * @constructor\n */\nfunction Utf8DecodeWorker() {\n    GenericWorker.call(this, \"utf-8 decode\");\n    // the last bytes if a chunk didn't end with a complete codepoint.\n    this.leftOver = null;\n}\nutils.inherits(Utf8DecodeWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nUtf8DecodeWorker.prototype.processChunk = function (chunk) {\n\n    var data = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", chunk.data);\n\n    // 1st step, re-use what's left of the previous chunk\n    if (this.leftOver && this.leftOver.length) {\n        if(support.uint8array) {\n            var previousData = data;\n            data = new Uint8Array(previousData.length + this.leftOver.length);\n            data.set(this.leftOver, 0);\n            data.set(previousData, this.leftOver.length);\n        } else {\n            data = this.leftOver.concat(data);\n        }\n        this.leftOver = null;\n    }\n\n    var nextBoundary = utf8border(data);\n    var usableData = data;\n    if (nextBoundary !== data.length) {\n        if (support.uint8array) {\n            usableData = data.subarray(0, nextBoundary);\n            this.leftOver = data.subarray(nextBoundary, data.length);\n        } else {\n            usableData = data.slice(0, nextBoundary);\n            this.leftOver = data.slice(nextBoundary, data.length);\n        }\n    }\n\n    this.push({\n        data : exports.utf8decode(usableData),\n        meta : chunk.meta\n    });\n};\n\n/**\n * @see GenericWorker.flush\n */\nUtf8DecodeWorker.prototype.flush = function () {\n    if(this.leftOver && this.leftOver.length) {\n        this.push({\n            data : exports.utf8decode(this.leftOver),\n            meta : {}\n        });\n        this.leftOver = null;\n    }\n};\nexports.Utf8DecodeWorker = Utf8DecodeWorker;\n\n/**\n * A worker to endcode string chunks into utf8 encoded binary chunks.\n * @constructor\n */\nfunction Utf8EncodeWorker() {\n    GenericWorker.call(this, \"utf-8 encode\");\n}\nutils.inherits(Utf8EncodeWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nUtf8EncodeWorker.prototype.processChunk = function (chunk) {\n    this.push({\n        data : exports.utf8encode(chunk.data),\n        meta : chunk.meta\n    });\n};\nexports.Utf8EncodeWorker = Utf8EncodeWorker;\n","map":{"mappings":[{"source":"node_modules/jszip/lib/utf8.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/jszip/lib/utf8.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}}],"sources":{"node_modules/jszip/lib/utf8.js":"'use strict';\n\nvar utils = require('./utils');\nvar support = require('./support');\nvar nodejsUtils = require('./nodejsUtils');\nvar GenericWorker = require('./stream/GenericWorker');\n\n/**\n * The following functions come from pako, from pako/lib/utils/strings\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new Array(256);\nfor (var i=0; i<256; i++) {\n  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n// convert string to array (typed, when possible)\nvar string2buf = function (str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n    // count binary size\n    for (m_pos = 0; m_pos < str_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n\n    // allocate buffer\n    if (support.uint8array) {\n        buf = new Uint8Array(buf_len);\n    } else {\n        buf = new Array(buf_len);\n    }\n\n    // convert\n    for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */\n            buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */\n            buf[i++] = 0xC0 | (c >>> 6);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else if (c < 0x10000) {\n            /* three bytes */\n            buf[i++] = 0xE0 | (c >>> 12);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else {\n            /* four bytes */\n            buf[i++] = 0xf0 | (c >>> 18);\n            buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n    }\n\n    return buf;\n};\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = function(buf, max) {\n    var pos;\n\n    max = max || buf.length;\n    if (max > buf.length) { max = buf.length; }\n\n    // go back from last position, until start of sequence found\n    pos = max-1;\n    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n    // Fuckup - very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) { return max; }\n\n    // If we came to start of buffer - that means vuffer is too small,\n    // return max too.\n    if (pos === 0) { return max; }\n\n    return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n// convert array to string\nvar buf2string = function (buf) {\n    var str, i, out, c, c_len;\n    var len = buf.length;\n\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len*2);\n\n    for (out=0, i=0; i<len;) {\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while (c_len > 1 && i < len) {\n            c = (c << 6) | (buf[i++] & 0x3f);\n            c_len--;\n        }\n\n        // terminated by end of string?\n        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n            utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n        }\n    }\n\n    // shrinkBuf(utf16buf, out)\n    if (utf16buf.length !== out) {\n        if(utf16buf.subarray) {\n            utf16buf = utf16buf.subarray(0, out);\n        } else {\n            utf16buf.length = out;\n        }\n    }\n\n    // return String.fromCharCode.apply(null, utf16buf);\n    return utils.applyFromCharCode(utf16buf);\n};\n\n\n// That's all for the pako functions.\n\n\n/**\n * Transform a javascript string into an array (typed if possible) of bytes,\n * UTF-8 encoded.\n * @param {String} str the string to encode\n * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.\n */\nexports.utf8encode = function utf8encode(str) {\n    if (support.nodebuffer) {\n        return nodejsUtils.newBufferFrom(str, \"utf-8\");\n    }\n\n    return string2buf(str);\n};\n\n\n/**\n * Transform a bytes array (or a representation) representing an UTF-8 encoded\n * string into a javascript string.\n * @param {Array|Uint8Array|Buffer} buf the data de decode\n * @return {String} the decoded string.\n */\nexports.utf8decode = function utf8decode(buf) {\n    if (support.nodebuffer) {\n        return utils.transformTo(\"nodebuffer\", buf).toString(\"utf-8\");\n    }\n\n    buf = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", buf);\n\n    return buf2string(buf);\n};\n\n/**\n * A worker to decode utf8 encoded binary chunks into string chunks.\n * @constructor\n */\nfunction Utf8DecodeWorker() {\n    GenericWorker.call(this, \"utf-8 decode\");\n    // the last bytes if a chunk didn't end with a complete codepoint.\n    this.leftOver = null;\n}\nutils.inherits(Utf8DecodeWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nUtf8DecodeWorker.prototype.processChunk = function (chunk) {\n\n    var data = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", chunk.data);\n\n    // 1st step, re-use what's left of the previous chunk\n    if (this.leftOver && this.leftOver.length) {\n        if(support.uint8array) {\n            var previousData = data;\n            data = new Uint8Array(previousData.length + this.leftOver.length);\n            data.set(this.leftOver, 0);\n            data.set(previousData, this.leftOver.length);\n        } else {\n            data = this.leftOver.concat(data);\n        }\n        this.leftOver = null;\n    }\n\n    var nextBoundary = utf8border(data);\n    var usableData = data;\n    if (nextBoundary !== data.length) {\n        if (support.uint8array) {\n            usableData = data.subarray(0, nextBoundary);\n            this.leftOver = data.subarray(nextBoundary, data.length);\n        } else {\n            usableData = data.slice(0, nextBoundary);\n            this.leftOver = data.slice(nextBoundary, data.length);\n        }\n    }\n\n    this.push({\n        data : exports.utf8decode(usableData),\n        meta : chunk.meta\n    });\n};\n\n/**\n * @see GenericWorker.flush\n */\nUtf8DecodeWorker.prototype.flush = function () {\n    if(this.leftOver && this.leftOver.length) {\n        this.push({\n            data : exports.utf8decode(this.leftOver),\n            meta : {}\n        });\n        this.leftOver = null;\n    }\n};\nexports.Utf8DecodeWorker = Utf8DecodeWorker;\n\n/**\n * A worker to endcode string chunks into utf8 encoded binary chunks.\n * @constructor\n */\nfunction Utf8EncodeWorker() {\n    GenericWorker.call(this, \"utf-8 encode\");\n}\nutils.inherits(Utf8EncodeWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nUtf8EncodeWorker.prototype.processChunk = function (chunk) {\n    this.push({\n        data : exports.utf8encode(chunk.data),\n        meta : chunk.meta\n    });\n};\nexports.Utf8EncodeWorker = Utf8EncodeWorker;\n"},"lineCount":276}},"hash":"3796abf1ac07003983133ade4cf78354","cacheData":{"env":{}}}