{"id":"node_modules/himalaya/lib/parser.js","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/himalaya/package.json","includedInParent":true,"mtime":1522984655000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1535346284235},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"./compat","loc":{"line":11,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/himalaya/lib/parser.js","resolved":"/Users/nick/projects/tomespark/node_modules/himalaya/lib/compat.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\nexports.hasTerminalParent = hasTerminalParent;\nexports.rewindStack = rewindStack;\nexports.parse = parse;\n\nvar _compat = require('./compat');\n\nfunction parser(tokens, options) {\n  var root = { tagName: null, children: [] };\n  var state = { tokens: tokens, options: options, cursor: 0, stack: [root] };\n  parse(state);\n  return root.children;\n}\n\nfunction hasTerminalParent(tagName, stack, terminals) {\n  var tagParents = terminals[tagName];\n  if (tagParents) {\n    var currentIndex = stack.length - 1;\n    while (currentIndex >= 0) {\n      var parentTagName = stack[currentIndex].tagName;\n      if (parentTagName === tagName) {\n        break;\n      }\n      if ((0, _compat.arrayIncludes)(tagParents, parentTagName)) {\n        return true;\n      }\n      currentIndex--;\n    }\n  }\n  return false;\n}\n\nfunction rewindStack(stack, newLength, childrenEndPosition, endPosition) {\n  stack[newLength].position.end = endPosition;\n  for (var i = newLength + 1, len = stack.length; i < len; i++) {\n    stack[i].position.end = childrenEndPosition;\n  }\n  stack.splice(newLength);\n}\n\nfunction parse(state) {\n  var tokens = state.tokens,\n      options = state.options;\n  var stack = state.stack;\n\n  var nodes = stack[stack.length - 1].children;\n  var len = tokens.length;\n  var cursor = state.cursor;\n\n  while (cursor < len) {\n    var token = tokens[cursor];\n    if (token.type !== 'tag-start') {\n      nodes.push(token);\n      cursor++;\n      continue;\n    }\n\n    var tagToken = tokens[++cursor];\n    cursor++;\n    var tagName = tagToken.content.toLowerCase();\n    if (token.close) {\n      var index = stack.length;\n      var shouldRewind = false;\n      while (--index > -1) {\n        if (stack[index].tagName === tagName) {\n          shouldRewind = true;\n          break;\n        }\n      }\n      while (cursor < len) {\n        var endToken = tokens[cursor];\n        if (endToken.type !== 'tag-end') break;\n        cursor++;\n      }\n      if (shouldRewind) {\n        rewindStack(stack, index, token.position.start, tokens[cursor - 1].position.end);\n        break;\n      } else {\n        continue;\n      }\n    }\n\n    var isClosingTag = (0, _compat.arrayIncludes)(options.closingTags, tagName);\n    var shouldRewindToAutoClose = isClosingTag;\n    if (shouldRewindToAutoClose) {\n      var terminals = options.closingTagAncestorBreakers;\n\n      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals);\n    }\n\n    if (shouldRewindToAutoClose) {\n      // rewind the stack to just above the previous\n      // closing tag of the same name\n      var currentIndex = stack.length - 1;\n      while (currentIndex > 0) {\n        if (tagName === stack[currentIndex].tagName) {\n          rewindStack(stack, currentIndex, token.position.start, token.position.start);\n          var previousIndex = currentIndex - 1;\n          nodes = stack[previousIndex].children;\n          break;\n        }\n        currentIndex = currentIndex - 1;\n      }\n    }\n\n    var attributes = [];\n    var attrToken = void 0;\n    while (cursor < len) {\n      attrToken = tokens[cursor];\n      if (attrToken.type === 'tag-end') break;\n      attributes.push(attrToken.content);\n      cursor++;\n    }\n\n    cursor++;\n    var children = [];\n    var position = {\n      start: token.position.start,\n      end: attrToken.position.end\n    };\n    var elementNode = {\n      type: 'element',\n      tagName: tagToken.content,\n      attributes: attributes,\n      children: children,\n      position: position\n    };\n    nodes.push(elementNode);\n\n    var hasChildren = !(attrToken.close || (0, _compat.arrayIncludes)(options.voidTags, tagName));\n    if (hasChildren) {\n      var size = stack.push({ tagName: tagName, children: children, position: position });\n      var innerState = { tokens: tokens, options: options, cursor: cursor, stack: stack };\n      parse(innerState);\n      cursor = innerState.cursor;\n      var rewoundInElement = stack.length === size;\n      if (rewoundInElement) {\n        elementNode.position.end = tokens[cursor - 1].position.end;\n      }\n    }\n  }\n  state.cursor = cursor;\n}\n//# sourceMappingURL=parser.js.map\n","map":{"mappings":[{"source":"node_modules/himalaya/lib/parser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/himalaya/lib/parser.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}}],"sources":{"node_modules/himalaya/lib/parser.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\nexports.hasTerminalParent = hasTerminalParent;\nexports.rewindStack = rewindStack;\nexports.parse = parse;\n\nvar _compat = require('./compat');\n\nfunction parser(tokens, options) {\n  var root = { tagName: null, children: [] };\n  var state = { tokens: tokens, options: options, cursor: 0, stack: [root] };\n  parse(state);\n  return root.children;\n}\n\nfunction hasTerminalParent(tagName, stack, terminals) {\n  var tagParents = terminals[tagName];\n  if (tagParents) {\n    var currentIndex = stack.length - 1;\n    while (currentIndex >= 0) {\n      var parentTagName = stack[currentIndex].tagName;\n      if (parentTagName === tagName) {\n        break;\n      }\n      if ((0, _compat.arrayIncludes)(tagParents, parentTagName)) {\n        return true;\n      }\n      currentIndex--;\n    }\n  }\n  return false;\n}\n\nfunction rewindStack(stack, newLength, childrenEndPosition, endPosition) {\n  stack[newLength].position.end = endPosition;\n  for (var i = newLength + 1, len = stack.length; i < len; i++) {\n    stack[i].position.end = childrenEndPosition;\n  }\n  stack.splice(newLength);\n}\n\nfunction parse(state) {\n  var tokens = state.tokens,\n      options = state.options;\n  var stack = state.stack;\n\n  var nodes = stack[stack.length - 1].children;\n  var len = tokens.length;\n  var cursor = state.cursor;\n\n  while (cursor < len) {\n    var token = tokens[cursor];\n    if (token.type !== 'tag-start') {\n      nodes.push(token);\n      cursor++;\n      continue;\n    }\n\n    var tagToken = tokens[++cursor];\n    cursor++;\n    var tagName = tagToken.content.toLowerCase();\n    if (token.close) {\n      var index = stack.length;\n      var shouldRewind = false;\n      while (--index > -1) {\n        if (stack[index].tagName === tagName) {\n          shouldRewind = true;\n          break;\n        }\n      }\n      while (cursor < len) {\n        var endToken = tokens[cursor];\n        if (endToken.type !== 'tag-end') break;\n        cursor++;\n      }\n      if (shouldRewind) {\n        rewindStack(stack, index, token.position.start, tokens[cursor - 1].position.end);\n        break;\n      } else {\n        continue;\n      }\n    }\n\n    var isClosingTag = (0, _compat.arrayIncludes)(options.closingTags, tagName);\n    var shouldRewindToAutoClose = isClosingTag;\n    if (shouldRewindToAutoClose) {\n      var terminals = options.closingTagAncestorBreakers;\n\n      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals);\n    }\n\n    if (shouldRewindToAutoClose) {\n      // rewind the stack to just above the previous\n      // closing tag of the same name\n      var currentIndex = stack.length - 1;\n      while (currentIndex > 0) {\n        if (tagName === stack[currentIndex].tagName) {\n          rewindStack(stack, currentIndex, token.position.start, token.position.start);\n          var previousIndex = currentIndex - 1;\n          nodes = stack[previousIndex].children;\n          break;\n        }\n        currentIndex = currentIndex - 1;\n      }\n    }\n\n    var attributes = [];\n    var attrToken = void 0;\n    while (cursor < len) {\n      attrToken = tokens[cursor];\n      if (attrToken.type === 'tag-end') break;\n      attributes.push(attrToken.content);\n      cursor++;\n    }\n\n    cursor++;\n    var children = [];\n    var position = {\n      start: token.position.start,\n      end: attrToken.position.end\n    };\n    var elementNode = {\n      type: 'element',\n      tagName: tagToken.content,\n      attributes: attributes,\n      children: children,\n      position: position\n    };\n    nodes.push(elementNode);\n\n    var hasChildren = !(attrToken.close || (0, _compat.arrayIncludes)(options.voidTags, tagName));\n    if (hasChildren) {\n      var size = stack.push({ tagName: tagName, children: children, position: position });\n      var innerState = { tokens: tokens, options: options, cursor: cursor, stack: stack };\n      parse(innerState);\n      cursor = innerState.cursor;\n      var rewoundInElement = stack.length === size;\n      if (rewoundInElement) {\n        elementNode.position.end = tokens[cursor - 1].position.end;\n      }\n    }\n  }\n  state.cursor = cursor;\n}\n//# sourceMappingURL=parser.js.map\n"},"lineCount":150}},"hash":"b8181009f7b8ac92e688a87d5d3a30e6","cacheData":{"env":{}}}