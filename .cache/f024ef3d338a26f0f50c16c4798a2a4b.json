{"id":"node_modules/protobufjs/src/decoder.js","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/protobufjs/package.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1534960276803},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"./enum","loc":{"line":4,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/decoder.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/enum.js"},{"name":"./types","loc":{"line":5,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/decoder.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/types.js"},{"name":"./util","loc":{"line":6,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/decoder.js","resolved":"/Users/nick/projects/tomespark/node_modules/protobufjs/src/util.js"}],"generated":{"js":"\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","map":{"mappings":[{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/protobufjs/src/decoder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}}],"sources":{"node_modules/protobufjs/src/decoder.js":"\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n"},"lineCount":107}},"hash":"2fa12f8299166ea2bdd8dcf3761bff22","cacheData":{"env":{}}}