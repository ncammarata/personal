{"id":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","dependencies":[{"name":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1539370614000},{"name":"/Users/nick/projects/personal/package.json","includedInParent":true,"mtime":1540176313978},{"name":"/Users/nick/projects/personal/.babelrc","includedInParent":true,"mtime":1535748626225},{"name":"@tensorflow/tfjs-core","loc":{"line":13,"column":26},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js"},{"name":"../backend/state","loc":{"line":14,"column":22},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/backend/state.js"},{"name":"../common","loc":{"line":15,"column":23},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/common.js"},{"name":"../errors","loc":{"line":16,"column":23},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/errors.js"},{"name":"../utils/generic_utils","loc":{"line":17,"column":28},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/utils/generic_utils.js"},{"name":"../utils/types_utils","loc":{"line":18,"column":26},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/utils/types_utils.js"},{"name":"../utils/variable_utils","loc":{"line":19,"column":29},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/utils/variable_utils.js"},{"name":"../variables","loc":{"line":20,"column":26},"parent":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","resolved":"/Users/nick/projects/personal/node_modules/@tensorflow/tfjs-layers/dist/variables.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar state_1 = require(\"../backend/state\");\nvar common_1 = require(\"../common\");\nvar errors_1 = require(\"../errors\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar types_utils = require(\"../utils/types_utils\");\nvar variable_utils = require(\"../utils/variable_utils\");\nvar variables_1 = require(\"../variables\");\nvar InputSpec = (function () {\n    function InputSpec(config) {\n        this.dtype = config.dtype;\n        this.shape = config.shape;\n        if (config.shape != null) {\n            this.ndim = config.shape.length;\n        }\n        else {\n            this.ndim = config.ndim;\n        }\n        this.maxNDim = config.maxNDim;\n        this.minNDim = config.minNDim;\n        this.axes = config.axes || {};\n    }\n    return InputSpec;\n}());\nexports.InputSpec = InputSpec;\nvar SymbolicTensor = (function () {\n    function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n        this.dtype = dtype;\n        this.shape = shape;\n        this.sourceLayer = sourceLayer;\n        this.inputs = inputs;\n        this.callArgs = callArgs;\n        this.outputTensorIndex = outputTensorIndex;\n        this.id = state_1.getNextUniqueTensorId();\n        if (name != null) {\n            this.originalName = common_1.getScopedTensorName(name);\n            this.name = common_1.getUniqueTensorName(this.originalName);\n        }\n        this.rank = shape.length;\n    }\n    return SymbolicTensor;\n}());\nexports.SymbolicTensor = SymbolicTensor;\nvar _nextNodeID = 0;\nvar Node = (function () {\n    function Node(config, callArgs) {\n        this.callArgs = callArgs;\n        this.id = _nextNodeID++;\n        this.outboundLayer = config.outboundLayer;\n        this.inboundLayers = config.inboundLayers;\n        this.nodeIndices = config.nodeIndices;\n        this.tensorIndices = config.tensorIndices;\n        this.inputTensors = config.inputTensors;\n        this.outputTensors = config.outputTensors;\n        this.inputMasks = config.inputMasks;\n        this.outputMasks = config.outputMasks;\n        this.inputShapes = config.inputShapes;\n        this.outputShapes = config.outputShapes;\n        for (var _i = 0, _a = config.inboundLayers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer != null) {\n                layer.outboundNodes.push(this);\n            }\n        }\n        config.outboundLayer.inboundNodes.push(this);\n    }\n    Node.prototype.getConfig = function () {\n        var inboundNames = [];\n        for (var _i = 0, _a = this.inboundLayers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer != null) {\n                inboundNames.push(layer.name);\n            }\n            else {\n                inboundNames.push(null);\n            }\n        }\n        return {\n            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n            inboundLayers: inboundNames,\n            nodeIndices: this.nodeIndices,\n            tensorIndices: this.tensorIndices\n        };\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar _nextLayerID = 0;\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(config) {\n        var _this = _super.call(this) || this;\n        _this._callHook = null;\n        _this._addedWeightNames = [];\n        _this._stateful = false;\n        _this.id = _nextLayerID++;\n        _this.activityRegularizer = null;\n        _this.inputSpec = null;\n        _this.supportsMasking = false;\n        _this._trainableWeights = [];\n        _this._nonTrainableWeights = [];\n        _this._losses = [];\n        _this._updates = [];\n        _this._built = false;\n        _this.inboundNodes = [];\n        _this.outboundNodes = [];\n        var name = config.name;\n        if (!name) {\n            var prefix = _this.getClassName();\n            name = generic_utils.toSnakeCase(prefix) + '_' + state_1.getUid(prefix);\n        }\n        _this.name = name;\n        _this.trainable = config.trainable == null ? true : config.trainable;\n        _this.updatable = config.updatable == null ? true : config.updatable;\n        if (config.inputShape != null || config.batchInputShape != null) {\n            var batchInputShape = void 0;\n            if (config.batchInputShape != null) {\n                batchInputShape = config.batchInputShape;\n            }\n            else if (config.inputShape != null) {\n                var batchSize = null;\n                if (config.batchSize != null) {\n                    batchSize = config.batchSize;\n                }\n                batchInputShape = [batchSize].concat(config.inputShape);\n            }\n            _this.batchInputShape = batchInputShape;\n            var dtype = config.dtype;\n            if (dtype == null) {\n                dtype = config.inputDType;\n            }\n            if (dtype == null) {\n                dtype = 'float32';\n            }\n            _this.dtype = dtype;\n        }\n        if (config.weights != null) {\n            _this.initialWeights = config.weights;\n        }\n        else {\n            _this.initialWeights = null;\n        }\n        _this._refCount = null;\n        return _this;\n    }\n    Layer.nodeKey = function (layer, nodeIndex) {\n        return layer.name + '_ib-' + nodeIndex.toString();\n    };\n    Layer.prototype.getNodeAtIndex = function (nodeIndex, attrName) {\n        if (this.inboundNodes.length === 0) {\n            throw new errors_1.RuntimeError('The layer has never been called ' +\n                (\"and thus has no defined \" + attrName + \".\"));\n        }\n        if (this.inboundNodes.length <= nodeIndex) {\n            throw new errors_1.ValueError(\"Asked to get \" + attrName + \" at node \" + nodeIndex + \", \" +\n                (\"but the layer has only \" + this.inboundNodes.length + \" inbound nodes.\"));\n        }\n        return this.inboundNodes[nodeIndex];\n    };\n    Layer.prototype.getInputAt = function (nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n    };\n    Layer.prototype.getOutputAt = function (nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n    };\n    Object.defineProperty(Layer.prototype, \"input\", {\n        get: function () {\n            if (this.inboundNodes.length > 1) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' has multiple inbound nodes, ' +\n                    'hence the notion of \"layer input\" ' +\n                    'is ill-defined. ' +\n                    'Use `getInputAt(nodeIndex)` instead.');\n            }\n            else if (this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' is not connected, no input to return.');\n            }\n            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"output\", {\n        get: function () {\n            if (this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' has no inbound nodes.');\n            }\n            if (this.inboundNodes.length > 1) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' has multiple inbound nodes, ' +\n                    'hence the notion of \"layer output\" ' +\n                    'is ill-defined. ' +\n                    'Use `getOutputAt(nodeIndex)` instead.');\n            }\n            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"losses\", {\n        get: function () {\n            return this._losses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.calculateLosses = function () {\n        return this.losses.map(function (lossFn) { return lossFn(); });\n    };\n    Object.defineProperty(Layer.prototype, \"updates\", {\n        get: function () {\n            return this._updates;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"built\", {\n        get: function () {\n            return this._built;\n        },\n        set: function (built) {\n            this._built = built;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"trainableWeights\", {\n        get: function () {\n            if (this.trainable) {\n                return this._trainableWeights;\n            }\n            else {\n                return [];\n            }\n        },\n        set: function (weights) {\n            this._trainableWeights = weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return this._trainableWeights.concat(this._nonTrainableWeights);\n            }\n            else {\n                return this._nonTrainableWeights;\n            }\n        },\n        set: function (weights) {\n            this._nonTrainableWeights = weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"weights\", {\n        get: function () {\n            return this.trainableWeights.concat(this.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"stateful\", {\n        get: function () {\n            return this._stateful;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.resetStates = function () {\n        if (!this.stateful) {\n            throw new Error('Cannot call the resetStates() method of a non-stateful Layer ' +\n                'object.');\n        }\n    };\n    Layer.prototype.assertInputCompatibility = function (inputs) {\n        inputs = generic_utils.toList(inputs);\n        if (this.inputSpec == null || this.inputSpec.length === 0) {\n            return;\n        }\n        var inputSpec = generic_utils.toList(this.inputSpec);\n        if (inputs.length !== inputSpec.length) {\n            throw new errors_1.ValueError(\"Layer \" + this.name + \" expects \" + inputSpec.length + \" inputs, \" +\n                (\"but it received \" + inputs.length + \" input tensors. \") +\n                (\"Input received: \" + inputs));\n        }\n        for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n            var x = inputs[inputIndex];\n            var spec = inputSpec[inputIndex];\n            if (spec == null) {\n                continue;\n            }\n            var ndim = x.rank;\n            if (spec.ndim != null) {\n                if (ndim !== spec.ndim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + \": \" +\n                        (\"expected ndim=\" + spec.ndim + \", found ndim=\" + ndim));\n                }\n            }\n            if (spec.maxNDim != null) {\n                if (ndim > spec.maxNDim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name +\n                        (\": expected max_ndim=\" + spec.maxNDim + \", found ndim=\" + ndim));\n                }\n            }\n            if (spec.minNDim != null) {\n                if (ndim < spec.minNDim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name +\n                        (\": expected min_ndim=\" + spec.minNDim + \", found ndim=\" + ndim + \".\"));\n                }\n            }\n            if (spec.dtype != null) {\n                if (x.dtype !== spec.dtype) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + \" \" +\n                        (\": expected dtype=\" + spec.dtype + \", found dtype=\" + x.dtype + \".\"));\n                }\n            }\n            if (spec.axes) {\n                var xShape = x.shape;\n                for (var key in spec.axes) {\n                    var axis = Number(key);\n                    var value = spec.axes[key];\n                    var xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n                    if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n                        throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" +\n                            (this.name + \": expected axis \" + axis + \" of input shape to \") +\n                            (\"have value \" + value + \" but got shape \" + xShape + \".\"));\n                    }\n                }\n            }\n            if (spec.shape != null) {\n                for (var i = 0; i < spec.shape.length; ++i) {\n                    var specDim = spec.shape[i];\n                    var dim = x.shape[i];\n                    if (specDim != null && dim != null) {\n                        if (specDim !== dim) {\n                            throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" +\n                                (this.name + \": expected shape=\" + spec.shape + \", \") +\n                                'found shape=${xShape}.');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Layer.prototype.call = function (inputs, kwargs) {\n        return inputs;\n    };\n    Layer.prototype.invokeCallHook = function (inputs, kwargs) {\n        if (this._callHook != null) {\n            this._callHook(inputs, kwargs);\n        }\n    };\n    Layer.prototype.setCallHook = function (callHook) {\n        this._callHook = callHook;\n    };\n    Layer.prototype.clearCallHook = function () {\n        this._callHook = null;\n    };\n    Layer.prototype.apply = function (inputs, kwargs) {\n        var _this = this;\n        kwargs = kwargs || {};\n        this.assertNotDisposed();\n        var inputsList = generic_utils.toList(inputs);\n        var allAreSymbolic = true;\n        for (var _i = 0, inputsList_1 = inputsList; _i < inputsList_1.length; _i++) {\n            var input = inputsList_1[_i];\n            if (!(input instanceof SymbolicTensor)) {\n                allAreSymbolic = false;\n                break;\n            }\n        }\n        var noneAreSymbolic = true;\n        for (var _a = 0, inputsList_2 = inputsList; _a < inputsList_2.length; _a++) {\n            var input = inputsList_2[_a];\n            if (input instanceof SymbolicTensor) {\n                noneAreSymbolic = false;\n                break;\n            }\n        }\n        if (allAreSymbolic === noneAreSymbolic) {\n            throw new errors_1.ValueError('Arguments to apply() must be all ' +\n                'SymbolicTensors or all Tensors');\n        }\n        return common_1.nameScope(this.name, function () {\n            if (!_this.built) {\n                _this.assertInputCompatibility(inputs);\n                var inputShapes = [];\n                for (var _i = 0, _a = generic_utils.toList(inputs); _i < _a.length; _i++) {\n                    var xElem = _a[_i];\n                    inputShapes.push(xElem.shape);\n                }\n                _this.build(generic_utils.singletonOrArray(inputShapes));\n                _this.built = true;\n                if (_this.initialWeights) {\n                    _this.setWeights(_this.initialWeights);\n                }\n                if (_this._refCount === null && noneAreSymbolic) {\n                    _this._refCount = 1;\n                }\n            }\n            _this.assertInputCompatibility(inputs);\n            if (noneAreSymbolic) {\n                var output = _this.call(inputs, kwargs);\n                var outputList = generic_utils.toList(output);\n                var outputListCopy = [];\n                for (var _b = 0, outputList_1 = outputList; _b < outputList_1.length; _b++) {\n                    var x = outputList_1[_b];\n                    if (inputsList.indexOf(x) !== -1) {\n                        x = x.clone();\n                    }\n                    outputListCopy.push(x);\n                }\n                output = generic_utils.singletonOrArray(outputListCopy);\n                if (_this.activityRegularizer != null) {\n                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n            else {\n                var inputShape = collectInputShape(inputs);\n                var outputShape = _this.computeOutputShape(inputShape);\n                var output = void 0;\n                var outputDType_1 = guessOutputDType(inputs);\n                _this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] :\n                    inputShape);\n                if (outputShape != null && outputShape.length > 0 &&\n                    Array.isArray(outputShape[0])) {\n                    output = outputShape\n                        .map(function (shape, index) { return new SymbolicTensor(outputDType_1, shape, _this, generic_utils.toList(inputs), kwargs, _this.name, index); });\n                }\n                else {\n                    output = new SymbolicTensor(outputDType_1, outputShape, _this, generic_utils.toList(inputs), kwargs, _this.name);\n                }\n                _this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);\n                _this._refCount++;\n                if (_this.activityRegularizer != null) {\n                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n        });\n    };\n    Layer.prototype.warnOnIncompatibleInputShape = function (inputShape) {\n        if (this.batchInputShape == null) {\n            return;\n        }\n        else if (inputShape.length !== this.batchInputShape.length) {\n            console.warn(\"The rank of the input tensor provided (shape: \" +\n                (JSON.stringify(inputShape) + \") does not match that of the \") +\n                (\"batchInputShape (\" + JSON.stringify(this.batchInputShape) + \") \") +\n                (\"of the layer \" + this.name));\n        }\n        else {\n            var dimMismatch_1 = false;\n            this.batchInputShape.forEach(function (dimension, i) {\n                if (dimension != null && inputShape[i] != null &&\n                    inputShape[i] !== dimension) {\n                    dimMismatch_1 = true;\n                }\n            });\n            if (dimMismatch_1) {\n                console.warn(\"The shape of the input tensor \" +\n                    (\"(\" + JSON.stringify(inputShape) + \") does not \") +\n                    (\"match the expectation of layer \" + this.name + \": \") +\n                    (\"\" + JSON.stringify(this.batchInputShape)));\n            }\n        }\n    };\n    Object.defineProperty(Layer.prototype, \"outputShape\", {\n        get: function () {\n            if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"The layer \" + this.name + \" has never been called and thus has no \" +\n                    \"defined output shape.\");\n            }\n            var allOutputShapes = [];\n            for (var _i = 0, _a = this.inboundNodes; _i < _a.length; _i++) {\n                var node = _a[_i];\n                var shapeString = JSON.stringify(node.outputShapes);\n                if (allOutputShapes.indexOf(shapeString) === -1) {\n                    allOutputShapes.push(shapeString);\n                }\n            }\n            if (allOutputShapes.length === 1) {\n                var outputShapes = this.inboundNodes[0].outputShapes;\n                if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n                    outputShapes.length === 1) {\n                    return outputShapes[0];\n                }\n                else {\n                    return outputShapes;\n                }\n            }\n            else {\n                throw new errors_1.AttributeError(\"The layer \" + this.name + \" has multiple inbound nodes with different \" +\n                    \"output shapes. Hence the notion of \\\"outut shape\\\" is ill-defined \" +\n                    \"for the layer.\");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.countParams = function () {\n        if (!this.built) {\n            throw new errors_1.RuntimeError(\"You tried to call countParams() on \" + this.name + \", \" +\n                \"but the layer is not built yet. Build it first by calling \" +\n                \"build(batchInputShape).\");\n        }\n        return variable_utils.countParamsInWeights(this.weights);\n    };\n    Layer.prototype.build = function (inputShape) {\n        this.built = true;\n    };\n    Layer.prototype.getWeights = function (trainableOnly) {\n        if (trainableOnly === void 0) { trainableOnly = false; }\n        return variables_1.batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n    };\n    Layer.prototype.setWeights = function (weights) {\n        var _this = this;\n        tfjs_core_1.tidy(function () {\n            var params = _this.weights;\n            if (params.length !== weights.length) {\n                throw new errors_1.ValueError(\"You called setWeights(weights) on layer \\\"\" + _this.name + \"\\\" \" +\n                    (\"with a weight list of length \" + weights.length + \", \") +\n                    (\"but the layer was expecting \" + params.length + \" weights. \") +\n                    (\"Provided weights: \" + weights + \"...\"));\n            }\n            if (params.length === 0) {\n                return;\n            }\n            var weightValueTuples = [];\n            var paramValues = variables_1.batchGetValue(params);\n            for (var i = 0; i < paramValues.length; ++i) {\n                var pv = paramValues[i];\n                var p = params[i];\n                var w = weights[i];\n                if (!tfjs_core_1.util.arraysEqual(pv.shape, w.shape)) {\n                    throw new errors_1.ValueError(\"Layer weight shape \" + pv.shape + \" \" +\n                        (\"not compatible with provided weight shape \" + w.shape));\n                }\n                weightValueTuples.push([p, w]);\n            }\n            variables_1.batchSetValue(weightValueTuples);\n        });\n    };\n    Layer.prototype.addWeight = function (name, shape, dtype, initializer, regularizer, trainable, constraint) {\n        if (this._addedWeightNames.indexOf(name) !== -1) {\n            throw new errors_1.ValueError(\"Duplicate weight name \" + name + \" for layer \" + this.name);\n        }\n        this._addedWeightNames.push(name);\n        if (dtype == null) {\n            dtype = 'float32';\n        }\n        var weight = new variables_1.LayerVariable(initializer.apply(shape, dtype), dtype, name, trainable, constraint);\n        if (regularizer != null) {\n            this.addLoss(function () { return regularizer.apply(weight.read()); });\n        }\n        if (trainable == null) {\n            trainable = true;\n        }\n        if (trainable) {\n            this._trainableWeights.push(weight);\n        }\n        else {\n            this._nonTrainableWeights.push(weight);\n        }\n        return weight;\n    };\n    Layer.prototype.addLoss = function (losses) {\n        if (losses == null || Array.isArray(losses) && losses.length === 0) {\n            return;\n        }\n        losses = generic_utils.toList(losses);\n        if (this._losses !== undefined && this._losses !== null) {\n            (_a = this.losses).push.apply(_a, losses);\n        }\n        var _a;\n    };\n    Layer.prototype.computeOutputShape = function (inputShape) {\n        return inputShape;\n    };\n    Layer.prototype.computeMask = function (inputs, mask) {\n        var _this = this;\n        if (!this.supportsMasking) {\n            if (mask != null) {\n                if (Array.isArray(mask)) {\n                    mask.forEach(function (maskElement) {\n                        if (maskElement != null) {\n                            throw new TypeError(\"Layer \" + _this.name + \" does not support masking,\" +\n                                'but was passed an inputMask.');\n                        }\n                    });\n                }\n                else {\n                    throw new TypeError(\"Layer \" + this.name + \" does not support masking,\" +\n                        'but was passed an inputMask.');\n                }\n            }\n            return null;\n        }\n        return mask;\n    };\n    Layer.prototype.addInboundNode = function (inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs) {\n        if (kwargs === void 0) { kwargs = null; }\n        var inputTensorList = generic_utils.toList(inputTensors);\n        outputTensors = generic_utils.toList(outputTensors);\n        inputMasks = generic_utils.toList(inputMasks);\n        outputMasks = generic_utils.toList(outputMasks);\n        inputShapes = types_utils.normalizeShapeList(inputShapes);\n        outputShapes = types_utils.normalizeShapeList(outputShapes);\n        var inboundLayers = [];\n        var nodeIndices = [];\n        var tensorIndices = [];\n        for (var _i = 0, inputTensorList_1 = inputTensorList; _i < inputTensorList_1.length; _i++) {\n            var x = inputTensorList_1[_i];\n            inboundLayers.push(x.sourceLayer);\n            nodeIndices.push(x.nodeIndex);\n            tensorIndices.push(x.tensorIndex);\n        }\n        new Node({\n            outboundLayer: this,\n            inboundLayers: inboundLayers,\n            nodeIndices: nodeIndices,\n            tensorIndices: tensorIndices,\n            inputTensors: inputTensorList,\n            outputTensors: outputTensors,\n            inputMasks: inputMasks,\n            outputMasks: outputMasks,\n            inputShapes: inputShapes,\n            outputShapes: outputShapes\n        }, kwargs);\n        for (var i = 0; i < outputTensors.length; i++) {\n            outputTensors[i].sourceLayer = this;\n            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n            outputTensors[i].tensorIndex = i;\n        }\n    };\n    Layer.prototype.getConfig = function () {\n        var config = { name: this.name, trainable: this.trainable };\n        if (this.batchInputShape != null) {\n            config['batchInputShape'] = this.batchInputShape;\n        }\n        if (this.dtype != null) {\n            config['dtype'] = this.dtype;\n        }\n        return config;\n    };\n    Layer.prototype.disposeWeights = function () {\n        this.weights.forEach(function (weight) { return weight.dispose(); });\n        return this.weights.length;\n    };\n    Layer.prototype.assertNotDisposed = function () {\n        if (this._refCount === 0) {\n            throw new Error(\"Layer '\" + this.name + \"' is already disposed.\");\n        }\n    };\n    Layer.prototype.dispose = function () {\n        if (!this.built) {\n            throw new Error(\"Cannot dispose Layer \" + this.name + \" because it has not been \" +\n                \"built yet.\");\n        }\n        if (this._refCount === null) {\n            throw new Error(\"Cannot dispose Layer \" + this.name + \" because it has not been used \" +\n                \"yet.\");\n        }\n        this.assertNotDisposed();\n        var numDisposedVariables = 0;\n        if (--this._refCount === 0) {\n            numDisposedVariables = this.disposeWeights();\n        }\n        return { refCountAfterDispose: this._refCount, numDisposedVariables: numDisposedVariables };\n    };\n    return Layer;\n}(tfjs_core_1.serialization.Serializable));\nexports.Layer = Layer;\nfunction collectInputShape(inputTensors) {\n    inputTensors =\n        generic_utils.toList(inputTensors);\n    var shapes = [];\n    for (var _i = 0, inputTensors_1 = inputTensors; _i < inputTensors_1.length; _i++) {\n        var x = inputTensors_1[_i];\n        shapes.push(x.shape);\n    }\n    return generic_utils.singletonOrArray(shapes);\n}\nfunction guessOutputDType(inputTensors) {\n    return 'float32';\n}\nfunction getSourceInputs(tensor, layer, nodeIndex) {\n    if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n        layer = tensor.sourceLayer;\n        nodeIndex = tensor.nodeIndex;\n    }\n    if (layer.inboundNodes.length === 0) {\n        return [tensor];\n    }\n    else {\n        var node = layer.inboundNodes[nodeIndex];\n        if (node.inboundLayers.length === 0) {\n            return node.inputTensors;\n        }\n        else {\n            var sourceTensors = [];\n            for (var i = 0; i < node.inboundLayers.length; i++) {\n                var x = node.inputTensors[i];\n                var layer_1 = node.inboundLayers[i];\n                var nodeIndex_1 = node.nodeIndices[i];\n                var previousSources = getSourceInputs(x, layer_1, nodeIndex_1);\n                for (var _i = 0, previousSources_1 = previousSources; _i < previousSources_1.length; _i++) {\n                    var x_1 = previousSources_1[_i];\n                    if (sourceTensors.indexOf(x_1) === -1) {\n                        sourceTensors.push(x_1);\n                    }\n                }\n            }\n            return sourceTensors;\n        }\n    }\n}\nexports.getSourceInputs = getSourceInputs;\n//# sourceMappingURL=topology.js.map","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-layers/dist/engine/topology.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nvar state_1 = require(\"../backend/state\");\nvar common_1 = require(\"../common\");\nvar errors_1 = require(\"../errors\");\nvar generic_utils = require(\"../utils/generic_utils\");\nvar types_utils = require(\"../utils/types_utils\");\nvar variable_utils = require(\"../utils/variable_utils\");\nvar variables_1 = require(\"../variables\");\nvar InputSpec = (function () {\n    function InputSpec(config) {\n        this.dtype = config.dtype;\n        this.shape = config.shape;\n        if (config.shape != null) {\n            this.ndim = config.shape.length;\n        }\n        else {\n            this.ndim = config.ndim;\n        }\n        this.maxNDim = config.maxNDim;\n        this.minNDim = config.minNDim;\n        this.axes = config.axes || {};\n    }\n    return InputSpec;\n}());\nexports.InputSpec = InputSpec;\nvar SymbolicTensor = (function () {\n    function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n        this.dtype = dtype;\n        this.shape = shape;\n        this.sourceLayer = sourceLayer;\n        this.inputs = inputs;\n        this.callArgs = callArgs;\n        this.outputTensorIndex = outputTensorIndex;\n        this.id = state_1.getNextUniqueTensorId();\n        if (name != null) {\n            this.originalName = common_1.getScopedTensorName(name);\n            this.name = common_1.getUniqueTensorName(this.originalName);\n        }\n        this.rank = shape.length;\n    }\n    return SymbolicTensor;\n}());\nexports.SymbolicTensor = SymbolicTensor;\nvar _nextNodeID = 0;\nvar Node = (function () {\n    function Node(config, callArgs) {\n        this.callArgs = callArgs;\n        this.id = _nextNodeID++;\n        this.outboundLayer = config.outboundLayer;\n        this.inboundLayers = config.inboundLayers;\n        this.nodeIndices = config.nodeIndices;\n        this.tensorIndices = config.tensorIndices;\n        this.inputTensors = config.inputTensors;\n        this.outputTensors = config.outputTensors;\n        this.inputMasks = config.inputMasks;\n        this.outputMasks = config.outputMasks;\n        this.inputShapes = config.inputShapes;\n        this.outputShapes = config.outputShapes;\n        for (var _i = 0, _a = config.inboundLayers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer != null) {\n                layer.outboundNodes.push(this);\n            }\n        }\n        config.outboundLayer.inboundNodes.push(this);\n    }\n    Node.prototype.getConfig = function () {\n        var inboundNames = [];\n        for (var _i = 0, _a = this.inboundLayers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            if (layer != null) {\n                inboundNames.push(layer.name);\n            }\n            else {\n                inboundNames.push(null);\n            }\n        }\n        return {\n            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,\n            inboundLayers: inboundNames,\n            nodeIndices: this.nodeIndices,\n            tensorIndices: this.tensorIndices\n        };\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar _nextLayerID = 0;\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(config) {\n        var _this = _super.call(this) || this;\n        _this._callHook = null;\n        _this._addedWeightNames = [];\n        _this._stateful = false;\n        _this.id = _nextLayerID++;\n        _this.activityRegularizer = null;\n        _this.inputSpec = null;\n        _this.supportsMasking = false;\n        _this._trainableWeights = [];\n        _this._nonTrainableWeights = [];\n        _this._losses = [];\n        _this._updates = [];\n        _this._built = false;\n        _this.inboundNodes = [];\n        _this.outboundNodes = [];\n        var name = config.name;\n        if (!name) {\n            var prefix = _this.getClassName();\n            name = generic_utils.toSnakeCase(prefix) + '_' + state_1.getUid(prefix);\n        }\n        _this.name = name;\n        _this.trainable = config.trainable == null ? true : config.trainable;\n        _this.updatable = config.updatable == null ? true : config.updatable;\n        if (config.inputShape != null || config.batchInputShape != null) {\n            var batchInputShape = void 0;\n            if (config.batchInputShape != null) {\n                batchInputShape = config.batchInputShape;\n            }\n            else if (config.inputShape != null) {\n                var batchSize = null;\n                if (config.batchSize != null) {\n                    batchSize = config.batchSize;\n                }\n                batchInputShape = [batchSize].concat(config.inputShape);\n            }\n            _this.batchInputShape = batchInputShape;\n            var dtype = config.dtype;\n            if (dtype == null) {\n                dtype = config.inputDType;\n            }\n            if (dtype == null) {\n                dtype = 'float32';\n            }\n            _this.dtype = dtype;\n        }\n        if (config.weights != null) {\n            _this.initialWeights = config.weights;\n        }\n        else {\n            _this.initialWeights = null;\n        }\n        _this._refCount = null;\n        return _this;\n    }\n    Layer.nodeKey = function (layer, nodeIndex) {\n        return layer.name + '_ib-' + nodeIndex.toString();\n    };\n    Layer.prototype.getNodeAtIndex = function (nodeIndex, attrName) {\n        if (this.inboundNodes.length === 0) {\n            throw new errors_1.RuntimeError('The layer has never been called ' +\n                (\"and thus has no defined \" + attrName + \".\"));\n        }\n        if (this.inboundNodes.length <= nodeIndex) {\n            throw new errors_1.ValueError(\"Asked to get \" + attrName + \" at node \" + nodeIndex + \", \" +\n                (\"but the layer has only \" + this.inboundNodes.length + \" inbound nodes.\"));\n        }\n        return this.inboundNodes[nodeIndex];\n    };\n    Layer.prototype.getInputAt = function (nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'input').inputTensors);\n    };\n    Layer.prototype.getOutputAt = function (nodeIndex) {\n        return generic_utils.singletonOrArray(this.getNodeAtIndex(nodeIndex, 'output').outputTensors);\n    };\n    Object.defineProperty(Layer.prototype, \"input\", {\n        get: function () {\n            if (this.inboundNodes.length > 1) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' has multiple inbound nodes, ' +\n                    'hence the notion of \"layer input\" ' +\n                    'is ill-defined. ' +\n                    'Use `getInputAt(nodeIndex)` instead.');\n            }\n            else if (this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' is not connected, no input to return.');\n            }\n            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'input').inputTensors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"output\", {\n        get: function () {\n            if (this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' has no inbound nodes.');\n            }\n            if (this.inboundNodes.length > 1) {\n                throw new errors_1.AttributeError(\"Layer \" + this.name +\n                    ' has multiple inbound nodes, ' +\n                    'hence the notion of \"layer output\" ' +\n                    'is ill-defined. ' +\n                    'Use `getOutputAt(nodeIndex)` instead.');\n            }\n            return generic_utils.singletonOrArray(this.getNodeAtIndex(0, 'output').outputTensors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"losses\", {\n        get: function () {\n            return this._losses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.calculateLosses = function () {\n        return this.losses.map(function (lossFn) { return lossFn(); });\n    };\n    Object.defineProperty(Layer.prototype, \"updates\", {\n        get: function () {\n            return this._updates;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"built\", {\n        get: function () {\n            return this._built;\n        },\n        set: function (built) {\n            this._built = built;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"trainableWeights\", {\n        get: function () {\n            if (this.trainable) {\n                return this._trainableWeights;\n            }\n            else {\n                return [];\n            }\n        },\n        set: function (weights) {\n            this._trainableWeights = weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"nonTrainableWeights\", {\n        get: function () {\n            if (!this.trainable) {\n                return this._trainableWeights.concat(this._nonTrainableWeights);\n            }\n            else {\n                return this._nonTrainableWeights;\n            }\n        },\n        set: function (weights) {\n            this._nonTrainableWeights = weights;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"weights\", {\n        get: function () {\n            return this.trainableWeights.concat(this.nonTrainableWeights);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Layer.prototype, \"stateful\", {\n        get: function () {\n            return this._stateful;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.resetStates = function () {\n        if (!this.stateful) {\n            throw new Error('Cannot call the resetStates() method of a non-stateful Layer ' +\n                'object.');\n        }\n    };\n    Layer.prototype.assertInputCompatibility = function (inputs) {\n        inputs = generic_utils.toList(inputs);\n        if (this.inputSpec == null || this.inputSpec.length === 0) {\n            return;\n        }\n        var inputSpec = generic_utils.toList(this.inputSpec);\n        if (inputs.length !== inputSpec.length) {\n            throw new errors_1.ValueError(\"Layer \" + this.name + \" expects \" + inputSpec.length + \" inputs, \" +\n                (\"but it received \" + inputs.length + \" input tensors. \") +\n                (\"Input received: \" + inputs));\n        }\n        for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n            var x = inputs[inputIndex];\n            var spec = inputSpec[inputIndex];\n            if (spec == null) {\n                continue;\n            }\n            var ndim = x.rank;\n            if (spec.ndim != null) {\n                if (ndim !== spec.ndim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + \": \" +\n                        (\"expected ndim=\" + spec.ndim + \", found ndim=\" + ndim));\n                }\n            }\n            if (spec.maxNDim != null) {\n                if (ndim > spec.maxNDim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name +\n                        (\": expected max_ndim=\" + spec.maxNDim + \", found ndim=\" + ndim));\n                }\n            }\n            if (spec.minNDim != null) {\n                if (ndim < spec.minNDim) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name +\n                        (\": expected min_ndim=\" + spec.minNDim + \", found ndim=\" + ndim + \".\"));\n                }\n            }\n            if (spec.dtype != null) {\n                if (x.dtype !== spec.dtype) {\n                    throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" + this.name + \" \" +\n                        (\": expected dtype=\" + spec.dtype + \", found dtype=\" + x.dtype + \".\"));\n                }\n            }\n            if (spec.axes) {\n                var xShape = x.shape;\n                for (var key in spec.axes) {\n                    var axis = Number(key);\n                    var value = spec.axes[key];\n                    var xShapeAtAxis = axis >= 0 ? xShape[axis] : xShape[xShape.length + axis];\n                    if (value != null && [value, null].indexOf(xShapeAtAxis) === -1) {\n                        throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" +\n                            (this.name + \": expected axis \" + axis + \" of input shape to \") +\n                            (\"have value \" + value + \" but got shape \" + xShape + \".\"));\n                    }\n                }\n            }\n            if (spec.shape != null) {\n                for (var i = 0; i < spec.shape.length; ++i) {\n                    var specDim = spec.shape[i];\n                    var dim = x.shape[i];\n                    if (specDim != null && dim != null) {\n                        if (specDim !== dim) {\n                            throw new errors_1.ValueError(\"Input \" + inputIndex + \" is incompatible with layer \" +\n                                (this.name + \": expected shape=\" + spec.shape + \", \") +\n                                'found shape=${xShape}.');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    Layer.prototype.call = function (inputs, kwargs) {\n        return inputs;\n    };\n    Layer.prototype.invokeCallHook = function (inputs, kwargs) {\n        if (this._callHook != null) {\n            this._callHook(inputs, kwargs);\n        }\n    };\n    Layer.prototype.setCallHook = function (callHook) {\n        this._callHook = callHook;\n    };\n    Layer.prototype.clearCallHook = function () {\n        this._callHook = null;\n    };\n    Layer.prototype.apply = function (inputs, kwargs) {\n        var _this = this;\n        kwargs = kwargs || {};\n        this.assertNotDisposed();\n        var inputsList = generic_utils.toList(inputs);\n        var allAreSymbolic = true;\n        for (var _i = 0, inputsList_1 = inputsList; _i < inputsList_1.length; _i++) {\n            var input = inputsList_1[_i];\n            if (!(input instanceof SymbolicTensor)) {\n                allAreSymbolic = false;\n                break;\n            }\n        }\n        var noneAreSymbolic = true;\n        for (var _a = 0, inputsList_2 = inputsList; _a < inputsList_2.length; _a++) {\n            var input = inputsList_2[_a];\n            if (input instanceof SymbolicTensor) {\n                noneAreSymbolic = false;\n                break;\n            }\n        }\n        if (allAreSymbolic === noneAreSymbolic) {\n            throw new errors_1.ValueError('Arguments to apply() must be all ' +\n                'SymbolicTensors or all Tensors');\n        }\n        return common_1.nameScope(this.name, function () {\n            if (!_this.built) {\n                _this.assertInputCompatibility(inputs);\n                var inputShapes = [];\n                for (var _i = 0, _a = generic_utils.toList(inputs); _i < _a.length; _i++) {\n                    var xElem = _a[_i];\n                    inputShapes.push(xElem.shape);\n                }\n                _this.build(generic_utils.singletonOrArray(inputShapes));\n                _this.built = true;\n                if (_this.initialWeights) {\n                    _this.setWeights(_this.initialWeights);\n                }\n                if (_this._refCount === null && noneAreSymbolic) {\n                    _this._refCount = 1;\n                }\n            }\n            _this.assertInputCompatibility(inputs);\n            if (noneAreSymbolic) {\n                var output = _this.call(inputs, kwargs);\n                var outputList = generic_utils.toList(output);\n                var outputListCopy = [];\n                for (var _b = 0, outputList_1 = outputList; _b < outputList_1.length; _b++) {\n                    var x = outputList_1[_b];\n                    if (inputsList.indexOf(x) !== -1) {\n                        x = x.clone();\n                    }\n                    outputListCopy.push(x);\n                }\n                output = generic_utils.singletonOrArray(outputListCopy);\n                if (_this.activityRegularizer != null) {\n                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n            else {\n                var inputShape = collectInputShape(inputs);\n                var outputShape = _this.computeOutputShape(inputShape);\n                var output = void 0;\n                var outputDType_1 = guessOutputDType(inputs);\n                _this.warnOnIncompatibleInputShape(Array.isArray(inputs) ? inputShape[0] :\n                    inputShape);\n                if (outputShape != null && outputShape.length > 0 &&\n                    Array.isArray(outputShape[0])) {\n                    output = outputShape\n                        .map(function (shape, index) { return new SymbolicTensor(outputDType_1, shape, _this, generic_utils.toList(inputs), kwargs, _this.name, index); });\n                }\n                else {\n                    output = new SymbolicTensor(outputDType_1, outputShape, _this, generic_utils.toList(inputs), kwargs, _this.name);\n                }\n                _this.addInboundNode(inputs, output, null, null, inputShape, outputShape, kwargs);\n                _this._refCount++;\n                if (_this.activityRegularizer != null) {\n                    throw new errors_1.NotImplementedError('Layer invocation in the presence of activity ' +\n                        'regularizer(s) is not supported yet.');\n                }\n                return output;\n            }\n        });\n    };\n    Layer.prototype.warnOnIncompatibleInputShape = function (inputShape) {\n        if (this.batchInputShape == null) {\n            return;\n        }\n        else if (inputShape.length !== this.batchInputShape.length) {\n            console.warn(\"The rank of the input tensor provided (shape: \" +\n                (JSON.stringify(inputShape) + \") does not match that of the \") +\n                (\"batchInputShape (\" + JSON.stringify(this.batchInputShape) + \") \") +\n                (\"of the layer \" + this.name));\n        }\n        else {\n            var dimMismatch_1 = false;\n            this.batchInputShape.forEach(function (dimension, i) {\n                if (dimension != null && inputShape[i] != null &&\n                    inputShape[i] !== dimension) {\n                    dimMismatch_1 = true;\n                }\n            });\n            if (dimMismatch_1) {\n                console.warn(\"The shape of the input tensor \" +\n                    (\"(\" + JSON.stringify(inputShape) + \") does not \") +\n                    (\"match the expectation of layer \" + this.name + \": \") +\n                    (\"\" + JSON.stringify(this.batchInputShape)));\n            }\n        }\n    };\n    Object.defineProperty(Layer.prototype, \"outputShape\", {\n        get: function () {\n            if (this.inboundNodes == null || this.inboundNodes.length === 0) {\n                throw new errors_1.AttributeError(\"The layer \" + this.name + \" has never been called and thus has no \" +\n                    \"defined output shape.\");\n            }\n            var allOutputShapes = [];\n            for (var _i = 0, _a = this.inboundNodes; _i < _a.length; _i++) {\n                var node = _a[_i];\n                var shapeString = JSON.stringify(node.outputShapes);\n                if (allOutputShapes.indexOf(shapeString) === -1) {\n                    allOutputShapes.push(shapeString);\n                }\n            }\n            if (allOutputShapes.length === 1) {\n                var outputShapes = this.inboundNodes[0].outputShapes;\n                if (Array.isArray(outputShapes) && Array.isArray(outputShapes[0]) &&\n                    outputShapes.length === 1) {\n                    return outputShapes[0];\n                }\n                else {\n                    return outputShapes;\n                }\n            }\n            else {\n                throw new errors_1.AttributeError(\"The layer \" + this.name + \" has multiple inbound nodes with different \" +\n                    \"output shapes. Hence the notion of \\\"outut shape\\\" is ill-defined \" +\n                    \"for the layer.\");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Layer.prototype.countParams = function () {\n        if (!this.built) {\n            throw new errors_1.RuntimeError(\"You tried to call countParams() on \" + this.name + \", \" +\n                \"but the layer is not built yet. Build it first by calling \" +\n                \"build(batchInputShape).\");\n        }\n        return variable_utils.countParamsInWeights(this.weights);\n    };\n    Layer.prototype.build = function (inputShape) {\n        this.built = true;\n    };\n    Layer.prototype.getWeights = function (trainableOnly) {\n        if (trainableOnly === void 0) { trainableOnly = false; }\n        return variables_1.batchGetValue(trainableOnly ? this.trainableWeights : this.weights);\n    };\n    Layer.prototype.setWeights = function (weights) {\n        var _this = this;\n        tfjs_core_1.tidy(function () {\n            var params = _this.weights;\n            if (params.length !== weights.length) {\n                throw new errors_1.ValueError(\"You called setWeights(weights) on layer \\\"\" + _this.name + \"\\\" \" +\n                    (\"with a weight list of length \" + weights.length + \", \") +\n                    (\"but the layer was expecting \" + params.length + \" weights. \") +\n                    (\"Provided weights: \" + weights + \"...\"));\n            }\n            if (params.length === 0) {\n                return;\n            }\n            var weightValueTuples = [];\n            var paramValues = variables_1.batchGetValue(params);\n            for (var i = 0; i < paramValues.length; ++i) {\n                var pv = paramValues[i];\n                var p = params[i];\n                var w = weights[i];\n                if (!tfjs_core_1.util.arraysEqual(pv.shape, w.shape)) {\n                    throw new errors_1.ValueError(\"Layer weight shape \" + pv.shape + \" \" +\n                        (\"not compatible with provided weight shape \" + w.shape));\n                }\n                weightValueTuples.push([p, w]);\n            }\n            variables_1.batchSetValue(weightValueTuples);\n        });\n    };\n    Layer.prototype.addWeight = function (name, shape, dtype, initializer, regularizer, trainable, constraint) {\n        if (this._addedWeightNames.indexOf(name) !== -1) {\n            throw new errors_1.ValueError(\"Duplicate weight name \" + name + \" for layer \" + this.name);\n        }\n        this._addedWeightNames.push(name);\n        if (dtype == null) {\n            dtype = 'float32';\n        }\n        var weight = new variables_1.LayerVariable(initializer.apply(shape, dtype), dtype, name, trainable, constraint);\n        if (regularizer != null) {\n            this.addLoss(function () { return regularizer.apply(weight.read()); });\n        }\n        if (trainable == null) {\n            trainable = true;\n        }\n        if (trainable) {\n            this._trainableWeights.push(weight);\n        }\n        else {\n            this._nonTrainableWeights.push(weight);\n        }\n        return weight;\n    };\n    Layer.prototype.addLoss = function (losses) {\n        if (losses == null || Array.isArray(losses) && losses.length === 0) {\n            return;\n        }\n        losses = generic_utils.toList(losses);\n        if (this._losses !== undefined && this._losses !== null) {\n            (_a = this.losses).push.apply(_a, losses);\n        }\n        var _a;\n    };\n    Layer.prototype.computeOutputShape = function (inputShape) {\n        return inputShape;\n    };\n    Layer.prototype.computeMask = function (inputs, mask) {\n        var _this = this;\n        if (!this.supportsMasking) {\n            if (mask != null) {\n                if (Array.isArray(mask)) {\n                    mask.forEach(function (maskElement) {\n                        if (maskElement != null) {\n                            throw new TypeError(\"Layer \" + _this.name + \" does not support masking,\" +\n                                'but was passed an inputMask.');\n                        }\n                    });\n                }\n                else {\n                    throw new TypeError(\"Layer \" + this.name + \" does not support masking,\" +\n                        'but was passed an inputMask.');\n                }\n            }\n            return null;\n        }\n        return mask;\n    };\n    Layer.prototype.addInboundNode = function (inputTensors, outputTensors, inputMasks, outputMasks, inputShapes, outputShapes, kwargs) {\n        if (kwargs === void 0) { kwargs = null; }\n        var inputTensorList = generic_utils.toList(inputTensors);\n        outputTensors = generic_utils.toList(outputTensors);\n        inputMasks = generic_utils.toList(inputMasks);\n        outputMasks = generic_utils.toList(outputMasks);\n        inputShapes = types_utils.normalizeShapeList(inputShapes);\n        outputShapes = types_utils.normalizeShapeList(outputShapes);\n        var inboundLayers = [];\n        var nodeIndices = [];\n        var tensorIndices = [];\n        for (var _i = 0, inputTensorList_1 = inputTensorList; _i < inputTensorList_1.length; _i++) {\n            var x = inputTensorList_1[_i];\n            inboundLayers.push(x.sourceLayer);\n            nodeIndices.push(x.nodeIndex);\n            tensorIndices.push(x.tensorIndex);\n        }\n        new Node({\n            outboundLayer: this,\n            inboundLayers: inboundLayers,\n            nodeIndices: nodeIndices,\n            tensorIndices: tensorIndices,\n            inputTensors: inputTensorList,\n            outputTensors: outputTensors,\n            inputMasks: inputMasks,\n            outputMasks: outputMasks,\n            inputShapes: inputShapes,\n            outputShapes: outputShapes\n        }, kwargs);\n        for (var i = 0; i < outputTensors.length; i++) {\n            outputTensors[i].sourceLayer = this;\n            outputTensors[i].nodeIndex = this.inboundNodes.length - 1;\n            outputTensors[i].tensorIndex = i;\n        }\n    };\n    Layer.prototype.getConfig = function () {\n        var config = { name: this.name, trainable: this.trainable };\n        if (this.batchInputShape != null) {\n            config['batchInputShape'] = this.batchInputShape;\n        }\n        if (this.dtype != null) {\n            config['dtype'] = this.dtype;\n        }\n        return config;\n    };\n    Layer.prototype.disposeWeights = function () {\n        this.weights.forEach(function (weight) { return weight.dispose(); });\n        return this.weights.length;\n    };\n    Layer.prototype.assertNotDisposed = function () {\n        if (this._refCount === 0) {\n            throw new Error(\"Layer '\" + this.name + \"' is already disposed.\");\n        }\n    };\n    Layer.prototype.dispose = function () {\n        if (!this.built) {\n            throw new Error(\"Cannot dispose Layer \" + this.name + \" because it has not been \" +\n                \"built yet.\");\n        }\n        if (this._refCount === null) {\n            throw new Error(\"Cannot dispose Layer \" + this.name + \" because it has not been used \" +\n                \"yet.\");\n        }\n        this.assertNotDisposed();\n        var numDisposedVariables = 0;\n        if (--this._refCount === 0) {\n            numDisposedVariables = this.disposeWeights();\n        }\n        return { refCountAfterDispose: this._refCount, numDisposedVariables: numDisposedVariables };\n    };\n    return Layer;\n}(tfjs_core_1.serialization.Serializable));\nexports.Layer = Layer;\nfunction collectInputShape(inputTensors) {\n    inputTensors =\n        generic_utils.toList(inputTensors);\n    var shapes = [];\n    for (var _i = 0, inputTensors_1 = inputTensors; _i < inputTensors_1.length; _i++) {\n        var x = inputTensors_1[_i];\n        shapes.push(x.shape);\n    }\n    return generic_utils.singletonOrArray(shapes);\n}\nfunction guessOutputDType(inputTensors) {\n    return 'float32';\n}\nfunction getSourceInputs(tensor, layer, nodeIndex) {\n    if (layer == null || (nodeIndex != null && nodeIndex > 0)) {\n        layer = tensor.sourceLayer;\n        nodeIndex = tensor.nodeIndex;\n    }\n    if (layer.inboundNodes.length === 0) {\n        return [tensor];\n    }\n    else {\n        var node = layer.inboundNodes[nodeIndex];\n        if (node.inboundLayers.length === 0) {\n            return node.inputTensors;\n        }\n        else {\n            var sourceTensors = [];\n            for (var i = 0; i < node.inboundLayers.length; i++) {\n                var x = node.inputTensors[i];\n                var layer_1 = node.inboundLayers[i];\n                var nodeIndex_1 = node.nodeIndices[i];\n                var previousSources = getSourceInputs(x, layer_1, nodeIndex_1);\n                for (var _i = 0, previousSources_1 = previousSources; _i < previousSources_1.length; _i++) {\n                    var x_1 = previousSources_1[_i];\n                    if (sourceTensors.indexOf(x_1) === -1) {\n                        sourceTensors.push(x_1);\n                    }\n                }\n            }\n            return sourceTensors;\n        }\n    }\n}\nexports.getSourceInputs = getSourceInputs;\n//# sourceMappingURL=topology.js.map"},"lineCount":738}},"hash":"48b74de73904938a672f45a83cb8ad5d","cacheData":{"env":{}}}