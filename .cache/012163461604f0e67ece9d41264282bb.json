{"dependencies":[],"generated":{"js":"'use strict';\n\n//Const\nvar NOAH_ARK_CAPACITY = 3;\n\n//List of formatting elements\nvar FormattingElementList = module.exports = function (treeAdapter) {\n    this.length = 0;\n    this.entries = [];\n    this.treeAdapter = treeAdapter;\n    this.bookmark = null;\n};\n\n//Entry types\nFormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';\nFormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';\n\n//Noah Ark's condition\n//OPTIMIZATION: at first we try to find possible candidates for exclusion using\n//lightweight heuristics without thorough attributes check.\nFormattingElementList.prototype._getNoahArkConditionCandidates = function (newElement) {\n    var candidates = [];\n\n    if (this.length >= NOAH_ARK_CAPACITY) {\n        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length,\n            neTagName = this.treeAdapter.getTagName(newElement),\n            neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n\n        for (var i = this.length - 1; i >= 0; i--) {\n            var entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY)\n                break;\n\n            var element = entry.element,\n                elementAttrs = this.treeAdapter.getAttrList(element),\n                isCandidate = this.treeAdapter.getTagName(element) === neTagName &&\n                              this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&\n                              elementAttrs.length === neAttrsLength;\n\n            if (isCandidate)\n                candidates.push({idx: i, attrs: elementAttrs});\n        }\n    }\n\n    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;\n};\n\nFormattingElementList.prototype._ensureNoahArkCondition = function (newElement) {\n    var candidates = this._getNoahArkConditionCandidates(newElement),\n        cLength = candidates.length;\n\n    if (cLength) {\n        var neAttrs = this.treeAdapter.getAttrList(newElement),\n            neAttrsLength = neAttrs.length,\n            neAttrsMap = Object.create(null);\n\n        //NOTE: build attrs map for the new element so we can perform fast lookups\n        for (var i = 0; i < neAttrsLength; i++) {\n            var neAttr = neAttrs[i];\n\n            neAttrsMap[neAttr.name] = neAttr.value;\n        }\n\n        for (i = 0; i < neAttrsLength; i++) {\n            for (var j = 0; j < cLength; j++) {\n                var cAttr = candidates[j].attrs[i];\n\n                if (neAttrsMap[cAttr.name] !== cAttr.value) {\n                    candidates.splice(j, 1);\n                    cLength--;\n                }\n\n                if (candidates.length < NOAH_ARK_CAPACITY)\n                    return;\n            }\n        }\n\n        //NOTE: remove bottommost candidates until Noah's Ark condition will not be met\n        for (i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {\n            this.entries.splice(candidates[i].idx, 1);\n            this.length--;\n        }\n    }\n};\n\n//Mutations\nFormattingElementList.prototype.insertMarker = function () {\n    this.entries.push({type: FormattingElementList.MARKER_ENTRY});\n    this.length++;\n};\n\nFormattingElementList.prototype.pushElement = function (element, token) {\n    this._ensureNoahArkCondition(element);\n\n    this.entries.push({\n        type: FormattingElementList.ELEMENT_ENTRY,\n        element: element,\n        token: token\n    });\n\n    this.length++;\n};\n\nFormattingElementList.prototype.insertElementAfterBookmark = function (element, token) {\n    var bookmarkIdx = this.length - 1;\n\n    for (; bookmarkIdx >= 0; bookmarkIdx--) {\n        if (this.entries[bookmarkIdx] === this.bookmark)\n            break;\n    }\n\n    this.entries.splice(bookmarkIdx + 1, 0, {\n        type: FormattingElementList.ELEMENT_ENTRY,\n        element: element,\n        token: token\n    });\n\n    this.length++;\n};\n\nFormattingElementList.prototype.removeEntry = function (entry) {\n    for (var i = this.length - 1; i >= 0; i--) {\n        if (this.entries[i] === entry) {\n            this.entries.splice(i, 1);\n            this.length--;\n            break;\n        }\n    }\n};\n\nFormattingElementList.prototype.clearToLastMarker = function () {\n    while (this.length) {\n        var entry = this.entries.pop();\n\n        this.length--;\n\n        if (entry.type === FormattingElementList.MARKER_ENTRY)\n            break;\n    }\n};\n\n//Search\nFormattingElementList.prototype.getElementEntryInScopeWithTagName = function (tagName) {\n    for (var i = this.length - 1; i >= 0; i--) {\n        var entry = this.entries[i];\n\n        if (entry.type === FormattingElementList.MARKER_ENTRY)\n            return null;\n\n        if (this.treeAdapter.getTagName(entry.element) === tagName)\n            return entry;\n    }\n\n    return null;\n};\n\nFormattingElementList.prototype.getElementEntry = function (element) {\n    for (var i = this.length - 1; i >= 0; i--) {\n        var entry = this.entries[i];\n\n        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element)\n            return entry;\n    }\n\n    return null;\n};\n"},"hash":"9a05e8f58ee28fe0dfeab629be784c0d"}