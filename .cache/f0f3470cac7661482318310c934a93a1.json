{"id":"node_modules/jszip/lib/stream/StreamHelper.js","dependencies":[{"name":"/Users/nick/projects/tomespark/node_modules/jszip/package.json","includedInParent":true,"mtime":1510180218000},{"name":"/Users/nick/projects/tomespark/package.json","includedInParent":true,"mtime":1534291651885},{"name":"/Users/nick/projects/tomespark/.babelrc","includedInParent":true,"mtime":1533367520439},{"name":"../utils","loc":{"line":3,"column":20},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/utils.js"},{"name":"./ConvertWorker","loc":{"line":4,"column":28},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/ConvertWorker.js"},{"name":"./GenericWorker","loc":{"line":5,"column":28},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/GenericWorker.js"},{"name":"../base64","loc":{"line":6,"column":21},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/base64.js"},{"name":"../support","loc":{"line":7,"column":22},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/support.js"},{"name":"../external","loc":{"line":8,"column":23},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/external.js"},{"name":"../nodejs/NodejsStreamOutputAdapter","optional":true,"loc":{"line":13,"column":44},"parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/projects/tomespark/node_modules/jszip/lib/nodejs/NodejsStreamOutputAdapter.js"},{"name":"buffer","parent":"/Users/nick/projects/tomespark/node_modules/jszip/lib/stream/StreamHelper.js","resolved":"/Users/nick/.npm-global/lib/node_modules/parcel/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\n\nvar utils = require('../utils');\nvar ConvertWorker = require('./ConvertWorker');\nvar GenericWorker = require('./GenericWorker');\nvar base64 = require('../base64');\nvar support = require(\"../support\");\nvar external = require(\"../external\");\n\nvar NodejsStreamOutputAdapter = null;\nif (support.nodestream) {\n    try {\n        NodejsStreamOutputAdapter = require('../nodejs/NodejsStreamOutputAdapter');\n    } catch(e) {}\n}\n\n/**\n * Apply the final transformation of the data. If the user wants a Blob for\n * example, it's easier to work with an U8intArray and finally do the\n * ArrayBuffer/Blob conversion.\n * @param {String} type the name of the final type\n * @param {String|Uint8Array|Buffer} content the content to transform\n * @param {String} mimeType the mime type of the content, if applicable.\n * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.\n */\nfunction transformZipOutput(type, content, mimeType) {\n    switch(type) {\n        case \"blob\" :\n            return utils.newBlob(utils.transformTo(\"arraybuffer\", content), mimeType);\n        case \"base64\" :\n            return base64.encode(content);\n        default :\n            return utils.transformTo(type, content);\n    }\n}\n\n/**\n * Concatenate an array of data of the given type.\n * @param {String} type the type of the data in the given array.\n * @param {Array} dataArray the array containing the data chunks to concatenate\n * @return {String|Uint8Array|Buffer} the concatenated data\n * @throws Error if the asked type is unsupported\n */\nfunction concat (type, dataArray) {\n    var i, index = 0, res = null, totalLength = 0;\n    for(i = 0; i < dataArray.length; i++) {\n        totalLength += dataArray[i].length;\n    }\n    switch(type) {\n        case \"string\":\n            return dataArray.join(\"\");\n          case \"array\":\n            return Array.prototype.concat.apply([], dataArray);\n        case \"uint8array\":\n            res = new Uint8Array(totalLength);\n            for(i = 0; i < dataArray.length; i++) {\n                res.set(dataArray[i], index);\n                index += dataArray[i].length;\n            }\n            return res;\n        case \"nodebuffer\":\n            return Buffer.concat(dataArray);\n        default:\n            throw new Error(\"concat : unsupported type '\"  + type + \"'\");\n    }\n}\n\n/**\n * Listen a StreamHelper, accumulate its content and concatenate it into a\n * complete block.\n * @param {StreamHelper} helper the helper to use.\n * @param {Function} updateCallback a callback called on each update. Called\n * with one arg :\n * - the metadata linked to the update received.\n * @return Promise the promise for the accumulation.\n */\nfunction accumulate(helper, updateCallback) {\n    return new external.Promise(function (resolve, reject){\n        var dataArray = [];\n        var chunkType = helper._internalType,\n            resultType = helper._outputType,\n            mimeType = helper._mimeType;\n        helper\n        .on('data', function (data, meta) {\n            dataArray.push(data);\n            if(updateCallback) {\n                updateCallback(meta);\n            }\n        })\n        .on('error', function(err) {\n            dataArray = [];\n            reject(err);\n        })\n        .on('end', function (){\n            try {\n                var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);\n                resolve(result);\n            } catch (e) {\n                reject(e);\n            }\n            dataArray = [];\n        })\n        .resume();\n    });\n}\n\n/**\n * An helper to easily use workers outside of JSZip.\n * @constructor\n * @param {Worker} worker the worker to wrap\n * @param {String} outputType the type of data expected by the use\n * @param {String} mimeType the mime type of the content, if applicable.\n */\nfunction StreamHelper(worker, outputType, mimeType) {\n    var internalType = outputType;\n    switch(outputType) {\n        case \"blob\":\n        case \"arraybuffer\":\n            internalType = \"uint8array\";\n        break;\n        case \"base64\":\n            internalType = \"string\";\n        break;\n    }\n\n    try {\n        // the type used internally\n        this._internalType = internalType;\n        // the type used to output results\n        this._outputType = outputType;\n        // the mime type\n        this._mimeType = mimeType;\n        utils.checkSupport(internalType);\n        this._worker = worker.pipe(new ConvertWorker(internalType));\n        // the last workers can be rewired without issues but we need to\n        // prevent any updates on previous workers.\n        worker.lock();\n    } catch(e) {\n        this._worker = new GenericWorker(\"error\");\n        this._worker.error(e);\n    }\n}\n\nStreamHelper.prototype = {\n    /**\n     * Listen a StreamHelper, accumulate its content and concatenate it into a\n     * complete block.\n     * @param {Function} updateCb the update callback.\n     * @return Promise the promise for the accumulation.\n     */\n    accumulate : function (updateCb) {\n        return accumulate(this, updateCb);\n    },\n    /**\n     * Add a listener on an event triggered on a stream.\n     * @param {String} evt the name of the event\n     * @param {Function} fn the listener\n     * @return {StreamHelper} the current helper.\n     */\n    on : function (evt, fn) {\n        var self = this;\n\n        if(evt === \"data\") {\n            this._worker.on(evt, function (chunk) {\n                fn.call(self, chunk.data, chunk.meta);\n            });\n        } else {\n            this._worker.on(evt, function () {\n                utils.delay(fn, arguments, self);\n            });\n        }\n        return this;\n    },\n    /**\n     * Resume the flow of chunks.\n     * @return {StreamHelper} the current helper.\n     */\n    resume : function () {\n        utils.delay(this._worker.resume, [], this._worker);\n        return this;\n    },\n    /**\n     * Pause the flow of chunks.\n     * @return {StreamHelper} the current helper.\n     */\n    pause : function () {\n        this._worker.pause();\n        return this;\n    },\n    /**\n     * Return a nodejs stream for this helper.\n     * @param {Function} updateCb the update callback.\n     * @return {NodejsStreamOutputAdapter} the nodejs stream.\n     */\n    toNodejsStream : function (updateCb) {\n        utils.checkSupport(\"nodestream\");\n        if (this._outputType !== \"nodebuffer\") {\n            // an object stream containing blob/arraybuffer/uint8array/string\n            // is strange and I don't know if it would be useful.\n            // I you find this comment and have a good usecase, please open a\n            // bug report !\n            throw new Error(this._outputType + \" is not supported by this method\");\n        }\n\n        return new NodejsStreamOutputAdapter(this, {\n            objectMode : this._outputType !== \"nodebuffer\"\n        }, updateCb);\n    }\n};\n\n\nmodule.exports = StreamHelper;\n","map":{"mappings":[{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/jszip/lib/stream/StreamHelper.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}}],"sources":{"node_modules/jszip/lib/stream/StreamHelper.js":"'use strict';\n\nvar utils = require('../utils');\nvar ConvertWorker = require('./ConvertWorker');\nvar GenericWorker = require('./GenericWorker');\nvar base64 = require('../base64');\nvar support = require(\"../support\");\nvar external = require(\"../external\");\n\nvar NodejsStreamOutputAdapter = null;\nif (support.nodestream) {\n    try {\n        NodejsStreamOutputAdapter = require('../nodejs/NodejsStreamOutputAdapter');\n    } catch(e) {}\n}\n\n/**\n * Apply the final transformation of the data. If the user wants a Blob for\n * example, it's easier to work with an U8intArray and finally do the\n * ArrayBuffer/Blob conversion.\n * @param {String} type the name of the final type\n * @param {String|Uint8Array|Buffer} content the content to transform\n * @param {String} mimeType the mime type of the content, if applicable.\n * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.\n */\nfunction transformZipOutput(type, content, mimeType) {\n    switch(type) {\n        case \"blob\" :\n            return utils.newBlob(utils.transformTo(\"arraybuffer\", content), mimeType);\n        case \"base64\" :\n            return base64.encode(content);\n        default :\n            return utils.transformTo(type, content);\n    }\n}\n\n/**\n * Concatenate an array of data of the given type.\n * @param {String} type the type of the data in the given array.\n * @param {Array} dataArray the array containing the data chunks to concatenate\n * @return {String|Uint8Array|Buffer} the concatenated data\n * @throws Error if the asked type is unsupported\n */\nfunction concat (type, dataArray) {\n    var i, index = 0, res = null, totalLength = 0;\n    for(i = 0; i < dataArray.length; i++) {\n        totalLength += dataArray[i].length;\n    }\n    switch(type) {\n        case \"string\":\n            return dataArray.join(\"\");\n          case \"array\":\n            return Array.prototype.concat.apply([], dataArray);\n        case \"uint8array\":\n            res = new Uint8Array(totalLength);\n            for(i = 0; i < dataArray.length; i++) {\n                res.set(dataArray[i], index);\n                index += dataArray[i].length;\n            }\n            return res;\n        case \"nodebuffer\":\n            return Buffer.concat(dataArray);\n        default:\n            throw new Error(\"concat : unsupported type '\"  + type + \"'\");\n    }\n}\n\n/**\n * Listen a StreamHelper, accumulate its content and concatenate it into a\n * complete block.\n * @param {StreamHelper} helper the helper to use.\n * @param {Function} updateCallback a callback called on each update. Called\n * with one arg :\n * - the metadata linked to the update received.\n * @return Promise the promise for the accumulation.\n */\nfunction accumulate(helper, updateCallback) {\n    return new external.Promise(function (resolve, reject){\n        var dataArray = [];\n        var chunkType = helper._internalType,\n            resultType = helper._outputType,\n            mimeType = helper._mimeType;\n        helper\n        .on('data', function (data, meta) {\n            dataArray.push(data);\n            if(updateCallback) {\n                updateCallback(meta);\n            }\n        })\n        .on('error', function(err) {\n            dataArray = [];\n            reject(err);\n        })\n        .on('end', function (){\n            try {\n                var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);\n                resolve(result);\n            } catch (e) {\n                reject(e);\n            }\n            dataArray = [];\n        })\n        .resume();\n    });\n}\n\n/**\n * An helper to easily use workers outside of JSZip.\n * @constructor\n * @param {Worker} worker the worker to wrap\n * @param {String} outputType the type of data expected by the use\n * @param {String} mimeType the mime type of the content, if applicable.\n */\nfunction StreamHelper(worker, outputType, mimeType) {\n    var internalType = outputType;\n    switch(outputType) {\n        case \"blob\":\n        case \"arraybuffer\":\n            internalType = \"uint8array\";\n        break;\n        case \"base64\":\n            internalType = \"string\";\n        break;\n    }\n\n    try {\n        // the type used internally\n        this._internalType = internalType;\n        // the type used to output results\n        this._outputType = outputType;\n        // the mime type\n        this._mimeType = mimeType;\n        utils.checkSupport(internalType);\n        this._worker = worker.pipe(new ConvertWorker(internalType));\n        // the last workers can be rewired without issues but we need to\n        // prevent any updates on previous workers.\n        worker.lock();\n    } catch(e) {\n        this._worker = new GenericWorker(\"error\");\n        this._worker.error(e);\n    }\n}\n\nStreamHelper.prototype = {\n    /**\n     * Listen a StreamHelper, accumulate its content and concatenate it into a\n     * complete block.\n     * @param {Function} updateCb the update callback.\n     * @return Promise the promise for the accumulation.\n     */\n    accumulate : function (updateCb) {\n        return accumulate(this, updateCb);\n    },\n    /**\n     * Add a listener on an event triggered on a stream.\n     * @param {String} evt the name of the event\n     * @param {Function} fn the listener\n     * @return {StreamHelper} the current helper.\n     */\n    on : function (evt, fn) {\n        var self = this;\n\n        if(evt === \"data\") {\n            this._worker.on(evt, function (chunk) {\n                fn.call(self, chunk.data, chunk.meta);\n            });\n        } else {\n            this._worker.on(evt, function () {\n                utils.delay(fn, arguments, self);\n            });\n        }\n        return this;\n    },\n    /**\n     * Resume the flow of chunks.\n     * @return {StreamHelper} the current helper.\n     */\n    resume : function () {\n        utils.delay(this._worker.resume, [], this._worker);\n        return this;\n    },\n    /**\n     * Pause the flow of chunks.\n     * @return {StreamHelper} the current helper.\n     */\n    pause : function () {\n        this._worker.pause();\n        return this;\n    },\n    /**\n     * Return a nodejs stream for this helper.\n     * @param {Function} updateCb the update callback.\n     * @return {NodejsStreamOutputAdapter} the nodejs stream.\n     */\n    toNodejsStream : function (updateCb) {\n        utils.checkSupport(\"nodestream\");\n        if (this._outputType !== \"nodebuffer\") {\n            // an object stream containing blob/arraybuffer/uint8array/string\n            // is strange and I don't know if it would be useful.\n            // I you find this comment and have a good usecase, please open a\n            // bug report !\n            throw new Error(this._outputType + \" is not supported by this method\");\n        }\n\n        return new NodejsStreamOutputAdapter(this, {\n            objectMode : this._outputType !== \"nodebuffer\"\n        }, updateCb);\n    }\n};\n\n\nmodule.exports = StreamHelper;\n"},"lineCount":214}},"hash":"f6276f19bdcb40abbbcdfb40d62957ff","cacheData":{"env":{}}}